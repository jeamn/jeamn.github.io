I"1*<p>在Java中，可以基于一个类创建多个对象，每个对象相互独立且拥有自己的成员。当我们希望该类的所有对象共享一个成员时，可以用 <em>static</em> 来修饰一个成员，称之为静态成员或类成员，可以使用类名或对象名进行访问（<strong>推荐用类名直接访问</strong>）
<!-- more --></p>
<h1 id="一static之静态变量">一、static之静态变量</h1>
<p>static修饰的变量称为静态变量，可以被所有类共享，直接使用类名来访问，无需创建类的对象。也可以创建对象来访问该变量。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWord</span><span class="o">{</span>
	<span class="kd">static</span> <span class="nc">String</span> <span class="n">test</span> <span class="o">=</span> <span class="s">"hello"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"通过类名访问test："</span> <span class="o">+</span> <span class="nc">HelloWord</span><span class="o">.</span><span class="na">test</span><span class="o">);</span>
		<span class="nc">HelloWord</span> <span class="n">hello</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HelloWord</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"通过对象名访问test："</span> <span class="o">+</span> <span class="n">hello</span><span class="o">.</span><span class="na">test</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>静态成员属于整个类，当系统第一次使用该类时，就会为其分配内存直到该类被卸载才会进行资源回收。</p>
<h1 id="二static之静态方法">二、static之静态方法</h1>
<p>static修饰的方法称为静态方法或类方法，可以直接使用类名调用静态方法，也可以通过对象名调用。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWord</span><span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(){</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"使用static声明静态方法"</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
	<span class="nc">HelloWord</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>  <span class="c1">//直接使用类名调用静态方法</span>
	<span class="nc">HelloWord</span> <span class="n">hello</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HelloWord</span><span class="o">();</span>
	<span class="n">hello</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>      <span class="c1">//通过对象名调用静态方法</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h4 id="注意点-">注意点 ：</h4>

<blockquote>
  <ol>
    <li>静态方法可以直接调用同类中的静态成员，但不能直接调用非静态成员，若要调用非静态变量需创建类的对象，然后通过对象来访问非静态变量。</li>
    <li>同理，静态方法中，不能直接调用非静态方法，要通过对象访问。</li>
    <li>在普通成员方法中，可以直接访问同类的非静态变量和静态变量。</li>
  </ol>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWord</span><span class="o">{</span>
	<span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"hello"</span><span class="o">;</span>
	<span class="kd">static</span> <span class="nc">String</span> <span class="n">name1</span> <span class="o">=</span> <span class="s">"world"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(){</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">"world"</span><span class="o">);</span>     <span class="c1">//不能直接调用非静态变量</span>
		<span class="nc">HelloWord</span> <span class="n">hello</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HelloWord</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hello</span><span class="o">.</span><span class="na">name</span> <span class="o">+</span> <span class="s">"world"</span><span class="o">);</span>     <span class="c1">//通过对象调用</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hello"</span> <span class="o">+</span> <span class="n">name1</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="三static之静态初始化块">三、static之静态初始化块</h1>
<p>静态初始化块：使用static定义,当类装载到系统时<strong><em>执行一次</em></strong>。若在静态初始化块中想初始化变量,那仅能初始化类变量,即static修饰的数据成员。而不能初始化普通的成员变量。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWord</span><span class="o">{</span>
	<span class="kt">int</span> <span class="n">num1</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">num2</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">num3</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">HelloWord</span><span class="o">(){</span>
		<span class="n">num1</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"通过构造方法为num1赋值"</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="o">{</span>
		<span class="n">num2</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">,</span><span class="n">println</span><span class="o">(</span><span class="s">"通过初始化块为num2赋值"</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="kd">static</span> <span class="o">{</span>
		<span class="n">num3</span> <span class="o">=</span> <span class="mi">30</span><span class="o">;</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"通过静态初始化块为静态变量num3赋值"</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">HelloWord</span> <span class="n">hello</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HelloWord</span><span class="o">();</span>   <span class="c1">//创建类的对象hello</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"num1="</span> <span class="o">+</span> <span class="n">hello</span><span class="o">.</span><span class="na">num1</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"num2="</span> <span class="o">+</span> <span class="n">hello</span><span class="o">.</span><span class="na">num2</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"num3="</span> <span class="o">+</span> <span class="n">num3</span><span class="o">);</span>
		<span class="nc">HelloWord</span> <span class="n">hello2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HelloWord</span><span class="o">();</span>  <span class="c1">//再创建类的对象</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>运行结果：</p>
<blockquote>
  <p>通过静态初始化块为静态变量num3赋值
通过初始化块为num2赋值
通过构造方法为num1赋值
num1=10
num2=20
num3=30
通过初始化块为num2赋值
通过构造方法为num1赋值</p>
</blockquote>

<p>可见程序运行时先执行静态初始化块，再执行普通初始化块，最后执行构造方法。而静态初始化块只执行一次。</p>

:ET