I"<|<h2 id="派发更新">派发更新</h2>
<p>响应式数据依赖收集的目的就是为了当我们修改数据的时候，可以对相关的依赖派发更新。派发更新的逻辑在 <code class="language-plaintext highlighter-rouge">setter</code> 中，</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">set</span><span class="p">:</span> <span class="kd">function</span> <span class="nx">reactiveSetter</span> <span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">getter</span> <span class="p">?</span> <span class="nx">getter</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">:</span> <span class="nx">val</span>
    <span class="cm">/* eslint-disable no-self-compare */</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">newVal</span> <span class="o">===</span> <span class="nx">value</span> <span class="o">||</span> <span class="p">(</span><span class="nx">newVal</span> <span class="o">!==</span> <span class="nx">newVal</span> <span class="o">&amp;&amp;</span> <span class="nx">value</span> <span class="o">!==</span> <span class="nx">value</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span>
    <span class="p">}</span>
    <span class="cm">/* eslint-enable no-self-compare */</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">production</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">customSetter</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">customSetter</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="c1">// #7981: for accessor properties without setter</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">getter</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">setter</span><span class="p">)</span> <span class="k">return</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">setter</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">setter</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">newVal</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">val</span> <span class="o">=</span> <span class="nx">newVal</span>
    <span class="p">}</span>
    <span class="nx">childOb</span> <span class="o">=</span> <span class="o">!</span><span class="nx">shallow</span> <span class="o">&amp;&amp;</span> <span class="nx">observe</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span>
    <span class="nx">dep</span><span class="p">.</span><span class="nx">notify</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>当我们对组件中的数据做了修改，会触发 setter 的逻辑，最后会调用 <code class="language-plaintext highlighter-rouge">dep.notify()</code> 方法，它是 <code class="language-plaintext highlighter-rouge">Dep</code> 的实例方法，定义在 <code class="language-plaintext highlighter-rouge">src/core/observer/dep.js</code> 中，</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Dep</span> <span class="p">{</span>
    <span class="nx">notify</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">// stabilize the subscriber list first</span>
        <span class="kd">const</span> <span class="nx">subs</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">subs</span><span class="p">.</span><span class="nx">slice</span><span class="p">()</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">production</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">config</span><span class="p">.</span><span class="k">async</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// subs aren't sorted in scheduler if not running async</span>
        <span class="c1">// we need to sort them now to make sure they fire in correct</span>
        <span class="c1">// order</span>
        <span class="nx">subs</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span><span class="p">.</span><span class="nx">id</span> <span class="o">-</span> <span class="nx">b</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">subs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">subs</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">update</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>这里的逻辑非常简单，遍历所有的 <code class="language-plaintext highlighter-rouge">subs</code>，也就是 <code class="language-plaintext highlighter-rouge">Watcher</code> 的实例数组，然后调用每一个 <code class="language-plaintext highlighter-rouge">watcher</code> 的 <code class="language-plaintext highlighter-rouge">update</code> 方法，它的定义在 <code class="language-plaintext highlighter-rouge">src/core/observer/watcher.js</code> 中：</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">update</span> <span class="p">()</span> <span class="p">{</span>
    <span class="cm">/* istanbul ignore else */</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lazy</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">dirty</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sync</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">run</span><span class="p">()</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">queueWatcher</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">update</code> 方法会执行三种逻辑，在一般的组件数据更新场景中，会走最后一种逻辑 <code class="language-plaintext highlighter-rouge">queueWatcher</code>，该方法在 <code class="language-plaintext highlighter-rouge">src/core/observer/scheduler.js</code> 中，</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">function</span> <span class="nx">queueWatcher</span> <span class="p">(</span><span class="nx">watcher</span><span class="p">:</span> <span class="nx">Watcher</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">watcher</span><span class="p">.</span><span class="nx">id</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">has</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">has</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">flushing</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">queue</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">watcher</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">// if already flushing, splice the watcher based on its id</span>
      <span class="c1">// if already past its id, it will be run next immediately.</span>
      <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span>
      <span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&gt;</span> <span class="nx">index</span> <span class="o">&amp;&amp;</span> <span class="nx">queue</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">id</span> <span class="o">&gt;</span> <span class="nx">watcher</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">i</span><span class="o">--</span>
      <span class="p">}</span>
      <span class="nx">queue</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">watcher</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="c1">// queue the flush</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">waiting</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">waiting</span> <span class="o">=</span> <span class="kc">true</span>

      <span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">production</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">config</span><span class="p">.</span><span class="k">async</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">flushSchedulerQueue</span><span class="p">()</span>
        <span class="k">return</span>
      <span class="p">}</span>
      <span class="nx">nextTick</span><span class="p">(</span><span class="nx">flushSchedulerQueue</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这里引入了一个队列的概念，这也是 Vue 在做派发更新的时候的一个优化的点，它并不会每次数据改变都触发 <code class="language-plaintext highlighter-rouge">watcher</code> 的回调，而是把这些 <code class="language-plaintext highlighter-rouge">watcher</code> 先添加到一个队列里，然后在 <code class="language-plaintext highlighter-rouge">nextTick</code> 后执行 <code class="language-plaintext highlighter-rouge">flushSchedulerQueue</code>。</p>

<p>这里有几个细节，首先用 <code class="language-plaintext highlighter-rouge">has</code> 对象保证同一个 <code class="language-plaintext highlighter-rouge">Watcher</code> 只添加一次；接着对 <code class="language-plaintext highlighter-rouge">flushing</code> 的判断；最后通过 <code class="language-plaintext highlighter-rouge">waiting</code> 保证对 <code class="language-plaintext highlighter-rouge">nextTick(flushSchedulerQueue)</code> 的调用逻辑也只有一次，最后执行 <code class="language-plaintext highlighter-rouge">nextTick()</code> ，可以理解它是在下一个 tick，也就是异步的去执行 <code class="language-plaintext highlighter-rouge">flushSchedulerQueue</code>，具体的 <code class="language-plaintext highlighter-rouge">nextTick</code> 原理可以参考源码。</p>

<p>接下来看一下 <code class="language-plaintext highlighter-rouge">flushSchedulerQueue</code> 的实现，它的定义在 <code class="language-plaintext highlighter-rouge">src/core/observer/scheduler.js</code> 中：</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">flushSchedulerQueue</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">currentFlushTimestamp</span> <span class="o">=</span> <span class="nx">getNow</span><span class="p">()</span>
  <span class="nx">flushing</span> <span class="o">=</span> <span class="kc">true</span>
  <span class="kd">let</span> <span class="nx">watcher</span><span class="p">,</span> <span class="nx">id</span>

  <span class="c1">// Sort queue before flush.</span>
  <span class="c1">// This ensures that:</span>
  <span class="c1">// 1. Components are updated from parent to child. (because parent is always</span>
  <span class="c1">//    created before the child)</span>
  <span class="c1">// 2. A component's user watchers are run before its render watcher (because</span>
  <span class="c1">//    user watchers are created before the render watcher)</span>
  <span class="c1">// 3. If a component is destroyed during a parent component's watcher run,</span>
  <span class="c1">//    its watchers can be skipped.</span>
  <span class="nx">queue</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span><span class="p">.</span><span class="nx">id</span> <span class="o">-</span> <span class="nx">b</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>

  <span class="c1">// do not cache length because more watchers might be pushed</span>
  <span class="c1">// as we run existing watchers</span>
  <span class="k">for</span> <span class="p">(</span><span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">index</span> <span class="o">&lt;</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">index</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">watcher</span> <span class="o">=</span> <span class="nx">queue</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">watcher</span><span class="p">.</span><span class="nx">before</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">watcher</span><span class="p">.</span><span class="nx">before</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="nx">id</span> <span class="o">=</span> <span class="nx">watcher</span><span class="p">.</span><span class="nx">id</span>
    <span class="nx">has</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span>
    <span class="nx">watcher</span><span class="p">.</span><span class="nx">run</span><span class="p">()</span>
    <span class="c1">// in dev build, check and stop circular updates.</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">production</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">has</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">circular</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nx">circular</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">||</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">circular</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">MAX_UPDATE_COUNT</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">warn</span><span class="p">(</span>
          <span class="dl">'</span><span class="s1">You may have an infinite update loop </span><span class="dl">'</span> <span class="o">+</span> <span class="p">(</span>
            <span class="nx">watcher</span><span class="p">.</span><span class="nx">user</span>
              <span class="p">?</span> <span class="s2">`in watcher with expression "</span><span class="p">${</span><span class="nx">watcher</span><span class="p">.</span><span class="nx">expression</span><span class="p">}</span><span class="s2">"`</span>
              <span class="p">:</span> <span class="s2">`in a component render function.`</span>
          <span class="p">),</span>
          <span class="nx">watcher</span><span class="p">.</span><span class="nx">vm</span>
        <span class="p">)</span>
        <span class="k">break</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// keep copies of post queues before resetting state</span>
  <span class="kd">const</span> <span class="nx">activatedQueue</span> <span class="o">=</span> <span class="nx">activatedChildren</span><span class="p">.</span><span class="nx">slice</span><span class="p">()</span>
  <span class="kd">const</span> <span class="nx">updatedQueue</span> <span class="o">=</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">slice</span><span class="p">()</span>

  <span class="nx">resetSchedulerState</span><span class="p">()</span>

  <span class="c1">// call component updated and activated hooks</span>
  <span class="nx">callActivatedHooks</span><span class="p">(</span><span class="nx">activatedQueue</span><span class="p">)</span>
  <span class="nx">callUpdatedHooks</span><span class="p">(</span><span class="nx">updatedQueue</span><span class="p">)</span>

  <span class="c1">// devtool hook</span>
  <span class="cm">/* istanbul ignore if */</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">devtools</span> <span class="o">&amp;&amp;</span> <span class="nx">config</span><span class="p">.</span><span class="nx">devtools</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">devtools</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">flush</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这里主要理解几个重要的点：</p>
<ul>
  <li>队列排序</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">queue.sort((a, b) =&gt; a.id - b.id) </code>对队列做了从小到大的排序，这么做主要有以下要确保以下几点：</p>

<blockquote>
  <p>1.组件的更新由父到子；因为父组件的创建过程是先于子的，所以 watcher 的创建也是先父后子，执行顺序也应该保持先父后子。</p>
</blockquote>

<blockquote>
  <p>2.用户的自定义 watcher 要优先于渲染 watcher 执行；因为用户自定义 watcher 是在渲染 watcher 之前创建的。</p>
</blockquote>

<blockquote>
  <p>3.如果一个组件在父组件的 watcher 执行期间被销毁，那么它对应的 watcher 执行都可以被跳过，所以父组件的 watcher 应该先执行。</p>
</blockquote>

<ul>
  <li>队列遍历</li>
</ul>

<p>在对 <code class="language-plaintext highlighter-rouge">queue</code> 排序后，接着就是要对它做遍历，拿到对应的 <code class="language-plaintext highlighter-rouge">watcher</code>，执行 <code class="language-plaintext highlighter-rouge">watcher.run()</code>。这里需要注意一个细节，在遍历的时候每次都会对 <code class="language-plaintext highlighter-rouge">queue.length</code> 求值，因为在 <code class="language-plaintext highlighter-rouge">watcher.run()</code> 的时候，很可能用户会再次添加新的 <code class="language-plaintext highlighter-rouge">watcher</code>，这样会再次执行到 <code class="language-plaintext highlighter-rouge">queueWatcher</code>，</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">flushing</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">queue</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">watcher</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// if already flushing, splice the watcher based on its id</span>
    <span class="c1">// if already past its id, it will be run next immediately.</span>
    <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&gt;</span> <span class="nx">index</span> <span class="o">&amp;&amp;</span> <span class="nx">queue</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">id</span> <span class="o">&gt;</span> <span class="nx">watcher</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">i</span><span class="o">--</span>
    <span class="p">}</span>
    <span class="nx">queue</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">watcher</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
<p>这个时候 <code class="language-plaintext highlighter-rouge">flushing</code> 为 true，就会执行到 else 的逻辑，然后就会从后往前找，找到第一个待插入 <code class="language-plaintext highlighter-rouge">watcher</code> 的 <code class="language-plaintext highlighter-rouge">id</code> 比当前队列中 <code class="language-plaintext highlighter-rouge">watcher</code> 的 <code class="language-plaintext highlighter-rouge">id</code> 大的位置。把 <code class="language-plaintext highlighter-rouge">watcher</code> 按照 <code class="language-plaintext highlighter-rouge">id</code> 的插入到队列中，因此 <code class="language-plaintext highlighter-rouge">queue</code> 的长度发生了变化。</p>

<ul>
  <li>状态恢复</li>
</ul>

<p>这个过程就是执行 <code class="language-plaintext highlighter-rouge">resetSchedulerState</code> 函数，它定义在 <code class="language-plaintext highlighter-rouge">src/core/observer/scheduler.js</code> 中，</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Reset the scheduler's state.
 */</span>
<span class="kd">function</span> <span class="nx">resetSchedulerState</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">index</span> <span class="o">=</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="nx">activatedChildren</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="nx">has</span> <span class="o">=</span> <span class="p">{}</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">production</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">circular</span> <span class="o">=</span> <span class="p">{}</span>
  <span class="p">}</span>
  <span class="nx">waiting</span> <span class="o">=</span> <span class="nx">flushing</span> <span class="o">=</span> <span class="kc">false</span>
<span class="p">}</span>
</code></pre></div></div>
<p>这个函数主要把控制流程状态的一些变量恢复到初始值，把 watcher 队列清空。</p>

<p>接着我们再分析另一种逻辑 <code class="language-plaintext highlighter-rouge">this.run()</code>，它的定义在 <code class="language-plaintext highlighter-rouge">src/core/observer/watcher.js</code> 中，</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */</span>
<span class="nx">run</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">active</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="kd">get</span><span class="p">()</span>
      <span class="k">if</span> <span class="p">(</span>
        <span class="nx">value</span> <span class="o">!==</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">||</span>
        <span class="c1">// Deep watchers and watchers on Object/Arrays should fire even</span>
        <span class="c1">// when the value is the same, because the value may</span>
        <span class="c1">// have mutated.</span>
        <span class="nx">isObject</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">||</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">deep</span>
      <span class="p">)</span> <span class="p">{</span>
        <span class="c1">// set new value</span>
        <span class="kd">const</span> <span class="nx">oldValue</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">try</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">cb</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vm</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span>
          <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">handleError</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">vm</span><span class="p">,</span> <span class="s2">`callback for watcher "</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">expression</span><span class="p">}</span><span class="s2">"`</span><span class="p">)</span>
          <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">cb</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vm</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>run 函数先通过 this.get() 得到它当前的值，然后做判断，如果满足新旧值不等、新值是对象类型、deep 模式任何一个条件，则执行 watcher 的回调，注意回调函数执行的时候会把第一个和第二个参数传入新值 value 和旧值 oldValue，这就是当我们添加自定义 watcher 的时候能在回调函数的参数中拿到新旧值的原因。</p>

<h2 id="总结">总结</h2>
<p>当数据发生变化的时候，触发 <code class="language-plaintext highlighter-rouge">setter</code> 逻辑，把在依赖过程中订阅的的所有订阅者，也就是 <code class="language-plaintext highlighter-rouge">watcher</code>，都触发它们的 <code class="language-plaintext highlighter-rouge">update</code> 过程，这个过程又利用了队列做了进一步优化，在 <code class="language-plaintext highlighter-rouge">nextTick</code> 后执行所有 <code class="language-plaintext highlighter-rouge">watcher</code> 的 <code class="language-plaintext highlighter-rouge">run</code>，最后执行它们的回调函数。</p>

<p><strong><em>参考：</em></strong><br />
<a href="https://cn.vuejs.org/v2/guide/deployment.html#%E6%A8%A1%E6%9D%BF%E9%A2%84%E7%BC%96%E8%AF%91">Vue 官方教程</a><br />
<a href="https://github.com/vuejs/vue">Vue 源码</a></p>
:ET