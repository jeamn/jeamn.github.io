I"Q<h3 id="一链表结构">一、链表结构</h3>

<p><strong>单向链表的反转</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//节点构造函数</span>
<span class="kd">function</span> <span class="nx">Node</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="kc">null</span>
<span class="p">}</span>
<span class="cm">/**
 * @description 定义链表
 * @param {Array} array
 * @return {List} 
 */</span>
<span class="kd">function</span> <span class="nx">List</span><span class="p">(</span><span class="nx">array</span><span class="p">){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="kc">null</span>
    <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="nx">temp</span> <span class="o">=</span> <span class="kc">null</span>
    <span class="k">while</span><span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span> <span class="nx">i</span> <span class="o">===</span> <span class="mi">0</span><span class="p">){</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
            <span class="nx">temp</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">head</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="kd">let</span> <span class="nx">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
            <span class="nx">temp</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">newNode</span>
            <span class="nx">temp</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">.</span><span class="nx">next</span>
        <span class="p">}</span>
        <span class="nx">i</span><span class="o">++</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// 链表反转</span>
<span class="kd">var</span> <span class="nx">reverseList</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">head</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">pre</span> <span class="o">=</span> <span class="kc">null</span>
    <span class="kd">var</span> <span class="nx">next</span> <span class="o">=</span> <span class="kc">null</span>
    <span class="k">while</span><span class="p">(</span><span class="nx">head</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">){</span>
        <span class="nx">next</span> <span class="o">=</span> <span class="nx">head</span><span class="p">.</span><span class="nx">next</span>
        <span class="nx">head</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">pre</span>
        <span class="nx">pre</span> <span class="o">=</span> <span class="nx">head</span>
        <span class="nx">head</span> <span class="o">=</span> <span class="nx">next</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">pre</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">reverseList</span><span class="p">(</span><span class="k">new</span> <span class="nx">List</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]).</span><span class="nx">head</span><span class="p">))</span>
</code></pre></div></div>

<p><strong>单向链表删除节点</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">removeValue</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">head</span><span class="p">,</span> <span class="nx">num</span><span class="p">){</span>
    <span class="k">while</span><span class="p">(</span><span class="nx">head</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">head</span><span class="p">.</span><span class="nx">value</span> <span class="o">!==</span> <span class="nx">num</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span>
        <span class="p">}</span>
        <span class="nx">head</span> <span class="o">=</span> <span class="nx">head</span><span class="p">.</span><span class="nx">next</span>
    <span class="p">}</span>
    <span class="kd">let</span> <span class="nx">pre</span> <span class="o">=</span> <span class="nx">head</span>
    <span class="kd">let</span> <span class="nx">cur</span> <span class="o">=</span> <span class="nx">head</span>
    <span class="k">while</span><span class="p">(</span><span class="nx">cur</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">cur</span><span class="p">.</span><span class="nx">value</span> <span class="o">===</span> <span class="nx">num</span><span class="p">){</span>
            <span class="nx">pre</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">cur</span><span class="p">.</span><span class="nx">next</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">pre</span> <span class="o">=</span> <span class="nx">cur</span>
        <span class="p">}</span>
        <span class="nx">cur</span> <span class="o">=</span> <span class="nx">cur</span><span class="p">.</span><span class="nx">next</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">head</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">List</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">])</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">removeValue</span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">head</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="二栈和队列">二、栈和队列</h3>

<p><strong>栈和队列的实现</strong></p>

<h4 id="思路1采用双向双端链表">思路1，采用双向(双端)链表</h4>
<p>设计一个双向链表，实现四个方法，从头部和尾部增删节点。</p>

<ul>
  <li>
    <p>栈的实现：从头部增节点，从头部删节点</p>
  </li>
  <li>
    <p>队列实现：从头部增节点，从尾部删节点</p>
  </li>
</ul>

<h4 id="思路2采用数组">思路2，采用数组</h4>

<ul>
  <li>
    <p>栈的实现：数组增加节点，index++，数组减少节点，index- -</p>
  </li>
  <li>
    <p>队列实现：数组增加节点，index++，超出则index置0，size变量控制入栈数和出栈数是否相等</p>
  </li>
</ul>

<p><strong>如何用栈结构实现队列？</strong></p>

<p>思路：利用两个栈，push和pop栈，元素入队列时入push栈，出队列时先将push栈的元素倒入pop栈，再将pop栈顶部元素出栈；</p>

<p>倒数据遵循原则：1）pop栈必须为空；2）push栈必须一次性倒完</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">class03</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Code06_TwoStacksImplementQueue</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">TwoStacksQueue</span> <span class="o">{</span>
		<span class="kd">public</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stackPush</span><span class="o">;</span>
		<span class="kd">public</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stackPop</span><span class="o">;</span>

		<span class="kd">public</span> <span class="nf">TwoStacksQueue</span><span class="o">()</span> <span class="o">{</span>
			<span class="n">stackPush</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
			<span class="n">stackPop</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
		<span class="o">}</span>

		<span class="c1">// push栈向pop栈倒入数据</span>
		<span class="kd">private</span> <span class="kt">void</span> <span class="nf">pushToPop</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">stackPop</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
				<span class="k">while</span> <span class="o">(!</span><span class="n">stackPush</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
					<span class="n">stackPop</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">stackPush</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
				<span class="o">}</span>
			<span class="o">}</span>
		<span class="o">}</span>

		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">pushInt</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">stackPush</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">pushInt</span><span class="o">);</span>
			<span class="n">pushToPop</span><span class="o">();</span>
		<span class="o">}</span>

		<span class="kd">public</span> <span class="kt">int</span> <span class="nf">poll</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">stackPop</span><span class="o">.</span><span class="na">empty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">stackPush</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
				<span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"Queue is empty!"</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="n">pushToPop</span><span class="o">();</span>
			<span class="k">return</span> <span class="n">stackPop</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
		<span class="o">}</span>

		<span class="kd">public</span> <span class="kt">int</span> <span class="nf">peek</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">stackPop</span><span class="o">.</span><span class="na">empty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">stackPush</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
				<span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"Queue is empty!"</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="n">pushToPop</span><span class="o">();</span>
			<span class="k">return</span> <span class="n">stackPop</span><span class="o">.</span><span class="na">peek</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">TwoStacksQueue</span> <span class="n">test</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TwoStacksQueue</span><span class="o">();</span>
		<span class="n">test</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
		<span class="n">test</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
		<span class="n">test</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">test</span><span class="o">.</span><span class="na">peek</span><span class="o">());</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">test</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">test</span><span class="o">.</span><span class="na">peek</span><span class="o">());</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">test</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">test</span><span class="o">.</span><span class="na">peek</span><span class="o">());</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">test</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>如何用队列结构实现栈？</strong></p>

<p>思路：队列是先进先出，则底层准备两个队列，data和help，元素入队列时直接入data队列，出队列时，将data队列的元素依次出队列后放入help队列，剩下最后一个元素真正出队列，然后将data队列和help队列互换。并以此继续入队和出队。</p>

<h3 id="三递归行为">三、递归行为</h3>

<p><strong>从思想上理解递归？</strong></p>

<p>例子：求一个数组上的最大值</p>

<p>思路：求数组上L…R上的最大值，</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">class03</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Code08_GetMax</span> <span class="o">{</span>

	<span class="c1">// 求arr中的最大值</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getMax</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">return</span> <span class="nf">process</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="c1">// arr[L..R]范围上求最大值  L ... R   N</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">process</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="no">L</span><span class="o">,</span> <span class="kt">int</span> <span class="no">R</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// arr[L..R]范围上只有一个数，直接返回，base case</span>
		<span class="k">if</span> <span class="o">(</span><span class="no">L</span> <span class="o">==</span> <span class="no">R</span><span class="o">)</span> <span class="o">{</span> 
			<span class="k">return</span> <span class="n">arr</span><span class="o">[</span><span class="no">L</span><span class="o">];</span>
		<span class="o">}</span>
		<span class="c1">// L...R 不只一个数</span>
		<span class="c1">// mid = (L + R) / 2</span>
		<span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="no">L</span> <span class="o">+</span> <span class="o">((</span><span class="no">R</span> <span class="o">-</span> <span class="no">L</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="o">);</span> <span class="c1">// 中点   	1</span>
		<span class="kt">int</span> <span class="n">leftMax</span> <span class="o">=</span> <span class="n">process</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="no">L</span><span class="o">,</span> <span class="n">mid</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">rightMax</span> <span class="o">=</span> <span class="n">process</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="no">R</span><span class="o">);</span>
		<span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">leftMax</span><span class="o">,</span> <span class="n">rightMax</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>递归的本质是什么？</p>

<p>利用系统栈，任何递归行为都能改写为非递归</p>

<p>遵循Master公式：T(N) = a * (N/b) + O(N^d)（其中的a、b、d都是常数）</p>

<p>如果log(b, a) &lt; d，复杂度为O(N^d)；</p>

<p>如果log(b, a) &gt; d，复杂度为O(N^log(b, a))；</p>

<p>如果log(b, a) == d，复杂度为O(N^d * logN)；</p>
:ET