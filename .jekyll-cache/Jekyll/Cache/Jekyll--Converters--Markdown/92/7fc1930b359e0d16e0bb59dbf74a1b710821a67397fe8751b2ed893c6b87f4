I":<h2 id="反射机制">反射机制</h2>
<p>是指程序在运行期间能够获取自身的信息，例如一个对象能够在运行时知道自己拥有哪些方法和属性，并且可以调用这些方法和属性。</p>

<p>先看一段简单的代码：</p>

<p>这里声明一个p变量存储对象obj的属性（方法）名称，有了对象名和属性（方法）名，就可以使用方括号语法来调用一个对象的属性（方法）：
<!--more--></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">p</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">p</span><span class="p">])</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">function</span><span class="dl">"</span><span class="p">){</span>
        <span class="nx">obj</span><span class="p">[</span><span class="nx">p</span><span class="p">]();</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">p</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>这段语句遍历obj对象的所有属性和方法，遇到属性则弹出它的值，遇到方法则立刻执行。</p>

<p>可以看出，所谓的反射机制，从简单方面来讲，就是对类中成员进行枚举、修改等操作的能力。</p>

<p>如果存在一种机制，在不知道某一个类中到底有什么函数，或者成员变量的情况下就可以对其操作（例如，js可以对类成员进行枚举），这种机制就可以成为反射。</p>

<p>js中没有继承机制，但是可以对某一个类的成员通过反射机制“逐一复制”，然后再修改需要“覆盖”的成员，就可以达到“继承”的效果。这是反射机制的一个应用。</p>

<h2 id="类的继承">类的继承</h2>
<p>prototype可以实现类的继承,由浅入深看它是如何实现。</p>

<ul>
  <li>先来看一段简单的继承代码：</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">class1</span><span class="p">(</span> <span class="p">){</span>
    <span class="c1">//构造函数</span>
<span class="p">}</span>
<span class="c1">//定义class1的类成员</span>
<span class="nx">class1</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">m1</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span> <span class="p">){</span>
        <span class="nx">alert</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">class2</span><span class="p">(</span> <span class="p">){</span>
    <span class="c1">//构造函数</span>
<span class="p">}</span>
<span class="nx">class2</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">class1</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
<span class="nx">class2</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">method</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="p">){</span>
    <span class="nx">alert</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">//创建两个类的实例</span>
<span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">class1</span><span class="p">(</span> <span class="p">);</span>
<span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">class2</span><span class="p">(</span> <span class="p">);</span>
<span class="c1">//调用方法</span>
<span class="nx">obj1</span><span class="p">.</span><span class="nx">method</span><span class="p">(</span> <span class="p">);</span>   <span class="c1">//2</span>
<span class="nx">obj2</span><span class="p">.</span><span class="nx">method</span><span class="p">(</span> <span class="p">);</span>   <span class="c1">//2</span>
<span class="nx">alert</span><span class="p">(</span><span class="nx">obj2</span> <span class="k">instanceof</span> <span class="nx">class1</span><span class="p">);</span>       <span class="c1">//true</span>
<span class="nx">alert</span><span class="p">(</span><span class="nx">obj2</span> <span class="k">instanceof</span> <span class="nx">class2</span><span class="p">);</span>      <span class="c1">//true</span>
</code></pre></div></div>
<blockquote>
  <p>结果是弹出两次“2”</p>
</blockquote>

<p>说明class1和class2共享同一个prototype，是对同一个对象的引用。它们仅仅是构造函数不同的两个类。</p>

<p>在JavaScript中，除了基本的数据类型（数字、字符串、布尔等），所有的赋值以及函数参数都是引用传递，而不是值传递。</p>

<blockquote>
  <p>instanceof操作符的执行机制就是判断一个对象是否是一个prototype的实例。</p>
</blockquote>

<p>向上面这样引用拷贝实现继承不是一种好办法，但在不严格的情况下（唯一约束是不允许类成员的覆盖定义），可以使用。</p>

<p>所以我们可以用反射机制来实现类的继承：利用for（…in…）枚举所有基类prototype的成员，并将其赋值给子类的prototype对象。</p>

<p>这就进行了值传递而不是引用传递，双方的改变互不影响。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">class1</span><span class="p">(</span> <span class="p">){</span>
    <span class="c1">//构造函数</span>
<span class="p">}</span>
<span class="nx">class1</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">method</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span> <span class="p">){</span>
        <span class="nx">alert</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="na">method2</span><span class="p">:</span><span class="kd">function</span><span class="p">(</span> <span class="p">){</span>
        <span class="nx">alert</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">class2</span><span class="p">(</span> <span class="p">)</span> <span class="p">{</span>
    <span class="c1">//构造函数</span>
<span class="p">}</span>
<span class="c1">//用反射机制实现class2继承于class1</span>
<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">p</span> <span class="k">in</span> <span class="nx">class1</span><span class="p">.</span><span class="nx">prototype</span><span class="p">){</span>
    <span class="nx">class2</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span> <span class="o">=</span> <span class="nx">class1</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">p</span><span class="p">];</span>
<span class="p">}</span>
<span class="c1">//覆盖定义class1中的method方法</span>
<span class="nx">class2</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">method</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="p">){</span>
    <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">new2</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>  
<span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">class1</span><span class="p">(</span> <span class="p">);</span>
<span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">class2</span><span class="p">(</span> <span class="p">);</span>

<span class="nx">obj1</span><span class="p">.</span><span class="nx">method</span><span class="p">(</span> <span class="p">);</span>   <span class="c1">//1</span>
<span class="nx">obj2</span><span class="p">.</span><span class="nx">method</span><span class="p">(</span> <span class="p">);</span>   <span class="c1">//new2</span>

<span class="nx">obj1</span><span class="p">.</span><span class="nx">method2</span><span class="p">(</span> <span class="p">);</span>   <span class="c1">//2</span>
<span class="nx">obj2</span><span class="p">.</span><span class="nx">method2</span><span class="p">(</span> <span class="p">);</span>   <span class="c1">//2</span>
</code></pre></div></div>
<p>可以看出，obj2重复定义的method覆盖了继承的method方法，同时method2方法未受影响。而且obj1中的method方法保持原有定义。</p>

<p>为了方便，我们可以为每个类添加一个共有的静态方法，实现类的继承。</p>

<p>方法如下：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">inherit</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">baseClass</span><span class="p">){</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">p</span> <span class="k">in</span> <span class="nx">baseClass</span><span class="p">.</span><span class="nx">prototype</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span> <span class="o">=</span> <span class="nx">baseClass</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">p</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这里是给所有函数对象的共同类Function添加继承方法，这样所有的类都会有一个inherit方法，用以实现继承。</p>

<p>于是</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">p</span> <span class="k">in</span> <span class="nx">class1</span><span class="p">.</span><span class="nx">prototype</span><span class="p">){</span>
    <span class="nx">class2</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span> <span class="o">=</span> <span class="nx">class1</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">p</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>
<p>就可以改写成：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">class2</span><span class="p">.</span><span class="nx">inherit</span><span class="p">(</span><span class="nx">class1</span><span class="p">);</span>
</code></pre></div></div>

<p>是不是更有 <em>面向对象</em> 的味道呢?</p>

<p>但这里有一个需要注意的地方：</p>

<p>在给class2中添加类成员定义时，不能直接给prototype赋值，而只能对其属性赋值。简单说，就是不能写成：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">class2</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span><span class="nx">成员定义</span><span class="p">}</span>
</code></pre></div></div>

<p>而只能写成：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">class2</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">prototypeName</span> <span class="o">=</span> <span class="nx">someValue</span><span class="p">;</span>
<span class="nx">class2</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">methodName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="p">){...}</span>
</code></pre></div></div>

<p>个人推荐比较简单的继承</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">function</span> <span class="nx">class1</span><span class="p">()</span> <span class="p">{</span>   
		<span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">mike</span><span class="dl">"</span><span class="p">;</span>   
	<span class="p">}</span>   
    <span class="kd">function</span> <span class="nx">class2</span><span class="p">()</span> <span class="p">{</span>   
		<span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>   
	<span class="p">}</span>   
		
		<span class="c1">// 下面实现class2继承class1 </span>
	<span class="nx">class2</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">class1</span><span class="p">();</span>
     
	<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">class2</span><span class="p">();</span>   
	<span class="nx">alert</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</code></pre></div></div>

:ET