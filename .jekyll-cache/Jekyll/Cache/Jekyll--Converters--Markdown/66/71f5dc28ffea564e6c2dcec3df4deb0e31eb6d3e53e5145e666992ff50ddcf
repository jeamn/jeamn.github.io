I"L<h2 id="一简单观察者模式实现">一、简单观察者模式实现</h2>
<p>首先我们写一个 EventEmitter 类，实现简单的事件监听、触发与销毁。</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">EventEmitter</span><span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_events</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="p">}</span>
    <span class="nx">on</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
        <span class="kd">let</span> <span class="nx">event</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">eventName</span><span class="p">]</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
            <span class="nx">event</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">eventName</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">callback</span><span class="p">]</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">emit</span><span class="p">(</span><span class="nx">eventName</span><span class="p">){</span>
        <span class="kd">let</span> <span class="nx">event</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">eventName</span><span class="p">]</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
            <span class="nx">event</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">fn</span> <span class="o">=&gt;</span> <span class="nx">fn</span><span class="p">())</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">off</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">eventName</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">eventName</span><span class="p">].</span><span class="nx">filter</span><span class="p">(</span><span class="nx">fn</span> <span class="o">=&gt;</span> <span class="nx">fn</span> <span class="o">!=</span> <span class="nx">callback</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">e</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventEmitter</span><span class="p">()</span>
<span class="nx">e</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">cook</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">做饭</span><span class="dl">'</span><span class="p">);</span>
<span class="p">})</span>
<span class="nx">e</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">cook</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">煮粥</span><span class="dl">'</span><span class="p">);</span>
<span class="p">})</span>
<span class="nx">e</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">cook</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>

<!-- more -->

<p>首先，初始化一个 EventEmitter，然后通过 EventEmitter 的 on 方法注册了一个事件，当 emit 触发对应的事件时，执行对应监听的回调函数。监听与触发，是最简单的观察者模式，那么，观察者模式有什么特点呢?</p>
<blockquote>
  <p>观察者将自己注册在被观察者里，并提供更新的接口</p>
</blockquote>

<blockquote>
  <p>当被观察者数据发生变化的时候，通知观察者调用更新的方法</p>
</blockquote>

<blockquote>
  <p>被观察者提供维护观察者的一系列方法</p>
</blockquote>

<p>观察者模式中，会有一个角色充当观察者，一个角色充当被观察者，那么在上面的 EventEmitter 中，观察者和被观察者其实是由同一个角色来充当，即 EventEmitter 这个类。该类自己监听它自己，并在监听被触发之后，调用监听的方法。</p>

<p>下面我们实现将观察者和被观察者分开：</p>

<p>我们定义一个明星的类，充当被观察者，再定义一个粉丝的类充当观察者，粉丝会观察着他们的明星，即观察者观察着被观察者。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Fan</span><span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">star</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">star</span> <span class="o">=</span> <span class="nx">star</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">star</span><span class="p">.</span><span class="nx">attach</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>  <span class="c1">// 初始化一个粉丝，并且粉丝将自己添加到他喜欢的明星的观察者队列里</span>
    <span class="p">}</span>
    <span class="nx">update</span><span class="p">(){</span>
        <span class="c1">// 被观察者（明星）状态发生变化的时候，会通知观察者（粉丝）调用更新方法</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">star</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">喜欢</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">star</span><span class="p">.</span><span class="nx">getState</span><span class="p">()}</span><span class="s2">，我也喜欢`</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Star</span><span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="dl">''</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">observers</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="p">}</span>
    <span class="nx">setState</span><span class="p">(</span><span class="nx">state</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">state</span>         <span class="c1">// 明星改变自己的状态</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_notifyAllObservers</span><span class="p">()</span> <span class="c1">// 一改变状态，就通知他的粉丝改变状态</span>
    <span class="p">}</span>
    <span class="nx">getState</span><span class="p">(){</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
    <span class="p">}</span>
    <span class="nx">attach</span><span class="p">(</span><span class="nx">observer</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">observers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">observer</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">_notifyAllObservers</span><span class="p">(){</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">observers</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">observers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">observer</span> <span class="o">=&gt;</span> <span class="nx">observer</span><span class="p">.</span><span class="nx">update</span><span class="p">())</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">star</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Star</span><span class="p">(</span><span class="dl">'</span><span class="s1">周董</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">let</span> <span class="nx">fanA</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Fan</span><span class="p">(</span><span class="dl">'</span><span class="s1">张三</span><span class="dl">'</span><span class="p">,</span> <span class="nx">star</span><span class="p">)</span>
<span class="nx">star</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="dl">'</span><span class="s1">菊花</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>
<p>这样，观察者与被观察者就是两个不同的类来充当，但我们会发现，观察者与被观察者之间还是有一定的耦合性的，因为观察者会将自己注册在被观察者里面。</p>

<p>那怎么解耦合呢？在观察者模式中，有一种典型的实现方式，可以将观察者与被观察者完全独立开来，这种模式，就是发布与订阅模式。发布与订阅模式是观察者模式的一种实现，会通过一个中间的代理对象来建立联系，从而实现发布者与订阅者的独立。我们来实现一个比较经典的房屋中介的例子：</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1、定义一个中介</span>
<span class="kd">class</span> <span class="nx">Agent</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_events</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="p">}</span>
    <span class="c1">// 订阅</span>
    <span class="nx">subscribe</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">listener</span><span class="p">){</span>                <span class="c1">// 中介提供订阅信息的方法</span>
        <span class="kd">let</span> <span class="nx">listeners</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">type</span><span class="p">]</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">listeners</span><span class="p">){</span>
            <span class="nx">listeners</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">listener</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">type</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">listener</span><span class="p">]</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">// 发布</span>
    <span class="nx">publish</span><span class="p">(</span><span class="nx">type</span><span class="p">){</span>                            <span class="c1">// 中介提供发布信息的方法</span>
        <span class="kd">let</span> <span class="nx">listeners</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">type</span><span class="p">]</span>
        <span class="kd">let</span> <span class="nx">args</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">listeners</span><span class="p">){</span>                        <span class="c1">// 发布信息时通知所有订阅该信息的订阅者</span>
            <span class="nx">listeners</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">listener</span> <span class="o">=&gt;</span> <span class="nx">listener</span><span class="p">(...</span><span class="nx">args</span><span class="p">))</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// 2、定义一个发布者房东</span>
<span class="kd">class</span> <span class="nx">LandLord</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
    <span class="p">}</span>
    <span class="nx">lend</span><span class="p">({</span><span class="nx">type</span><span class="p">,</span> <span class="nx">agent</span><span class="p">,</span> <span class="nx">msg</span><span class="p">}){</span>
        <span class="nx">agent</span><span class="p">.</span><span class="nx">publish</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span><span class="nx">msg</span><span class="p">)</span>   <span class="c1">// 房东发布信息后，会触发中介的发布方法，改方法会去通知所有订阅者</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// 3、定义一个订阅者租客</span>
<span class="kd">class</span> <span class="nx">Tenant</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
    <span class="p">}</span>
    <span class="nx">rent</span><span class="p">({</span><span class="nx">type</span><span class="p">,</span> <span class="nx">agent</span><span class="p">}){</span>        <span class="c1">// 租客订阅信息，会触发中介的订阅方法，被中介监听</span>
        <span class="nx">agent</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">type</span> <span class="p">,</span> <span class="nx">msg</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`中介发布了</span><span class="p">${</span><span class="nx">type</span><span class="p">}</span><span class="s2">，具体信息：</span><span class="p">${</span><span class="nx">msg</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
        <span class="p">})</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// 4、发布订阅</span>
<span class="kd">let</span> <span class="nx">agent</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Agent</span><span class="p">()</span>
<span class="kd">let</span> <span class="nx">landlord</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LandLord</span><span class="p">()</span>
<span class="kd">let</span> <span class="nx">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Tenant</span><span class="p">(</span><span class="dl">'</span><span class="s1">张三</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">t1</span><span class="p">.</span><span class="nx">rent</span><span class="p">({</span>
    <span class="nx">agent</span><span class="p">,</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">别墅</span><span class="dl">'</span>
<span class="p">})</span>
<span class="nx">landlord</span><span class="p">.</span><span class="nx">lend</span><span class="p">({</span>
    <span class="nx">agent</span><span class="p">,</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">别墅</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">msg</span><span class="p">:</span> <span class="dl">'</span><span class="s1">这别墅面朝大海</span><span class="dl">'</span>
<span class="p">})</span>
</code></pre></div></div>

<p>发布订阅模式也叫观察者模式，但是它更符合设计模式的哲学，发布者与订阅者不需要相互知道对方的存在。</p>

<p>观察者模式大多是处理同步的，比如事件触发，被观察者就会调用观察者的方法。而发布订阅模式一般是处理异步的，比如 Promise 中，异步的的代码会先存储，等待时机成熟才会触发。</p>
:ET