I"I	<h2 id="本质在树上做动态规划动态规划用空间换时间即利用递归遍历二叉树的便利性"><strong>本质：在树上做动态规划（动态规划：用空间换时间），即，利用递归遍历二叉树的便利性。</strong></h2>

<p>可以解决绝大多数的二叉树问题尤其是树形dp问题。</p>

<p>平衡树的概念：每一棵子树左树和右树的高度差不超过1。</p>

<h2 id="二叉树的递归套路"><strong>二叉树的递归套路：</strong></h2>

<p>1）假设以X节点为头，假设可以向X左树和X右树要任何信息</p>

<p>2）在上一步的假设下，讨论以X为头节点的树，得到答案的可能性（最重要）</p>

<p>3）列出所有可能性后，确定到底需要向左树和右树要什么样的信息</p>

<p>4）把左树信息和右树信息求全集，就是任何一棵子树都需要返回的信息S</p>

<p>5）递归函数都返回S，每一棵树都这么要求</p>

<p>6）写代码，在代码中考虑如何把左树的信息和右树的信息整合出整棵树的信息</p>

<h4 id="例题"><strong><em>例题：</em></strong></h4>

<ol>
  <li>
    <p>判断二叉树是否为平衡二叉树</p>

    <p><strong>平衡二叉树的性质：要么是一棵空树，要么任何一个节点的左右子树高度差的绝对值不超过1。</strong></p>

    <p><strong><em>思路：树形 dp</em></strong></p>

    <p>1）以某个节点X为头节点的子树中，分析答案有哪些可能性：</p>

    <p>可能性1：如果X的左子树不是平衡的，则二叉树不平衡；</p>

    <p>可能性2：如果X的右子树不是平衡的，则二叉树不平衡；</p>

    <p>可能性3：如果X的左子树和右子树的高度差超过1，则二叉树不平衡；</p>

    <p>可能性4：如果上面的可能性都不中，则二叉树平衡；</p>

    <p>2）根据第一步分析的可能性，列出所有需要的信息：</p>

    <p>左子树是否平衡；</p>

    <p>右子树是否平衡；</p>

    <p>左右子树高度差；</p>

    <p>3）根据第二部信息汇总，定义返回信息</p>

    <p>4）设计递归函数</p>
  </li>
  <li>
    <p>给定一棵二叉树的头节点head，任何两个节点之间都存在距离，返回整棵二叉树的最大距离。</p>

    <p><strong><em>思路：树形 dp</em></strong></p>
  </li>
</ol>
:ET