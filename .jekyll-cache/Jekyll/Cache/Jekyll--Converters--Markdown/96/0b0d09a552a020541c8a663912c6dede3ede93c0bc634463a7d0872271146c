I"HO<h2 id="一变化侦测">一、变化侦测</h2>

<p>变化侦测有两种类型：”推“和”拉“。</p>

<p>“拉”指的是当状态发生变化，框架不知道哪个状态变了，需要通过暴力对比去找出变化的 DOM 节点。React 和 Angular 就是这种侦测方式，分别采用虚拟 DOM 技术和脏检查。</p>

<p>”推“指的是指的是状态变化能立马知道，Vue 就是属于这种，因此 Vue 能进行更细粒度的更新。</p>

<p>细粒度指的是假如一个状态绑定着好多个依赖，每个依赖代表一个DOM节点，那么当这个状态发生改变时，向这个状态的所有依赖发送通知，让它们进行DOM更新操作。</p>

<p>粒度太细，当状态多的情况下，依赖追踪在内存上的开销会很大。所以 Vue2.0 引入了虚拟 DOM，将粒度调整为中等粒度，即一个状态所绑定的依赖不再是一个 DOM 节点，而是一个组件。状态的变化会先通知到组件，组件内部再使用虚拟 DOM 进行比对。</p>

<h2 id="二如何追踪变化">二、如何追踪变化</h2>

<p>变化侦测有两种方式：Object.defineProperty 和 ES6 的 Proxy</p>

<p>下面定义一个响应式的方法：</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">defineReactive</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">Obejct</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="p">{</span>
		<span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
		<span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
		<span class="na">get</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">val</span>
		<span class="p">},</span>
		<span class="na">set</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="nx">val</span> <span class="o">===</span> <span class="nx">newVal</span><span class="p">)</span> <span class="k">return</span>
			<span class="nx">val</span> <span class="o">=</span> <span class="nx">newVal</span>
		<span class="p">}</span>
	<span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="三如何收集依赖">三、如何收集依赖</h2>

<p>在 getter 中收集依赖，在 setter 中触发依赖。</p>

<h2 id="四依赖收集在哪里">四、依赖收集在哪里</h2>

<p>每个 key 都有一个数组，用来存储当前 key 的依赖。假设有一个依赖，存储在 <a href="http://window.target">window.target</a> 上，</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">dep</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1">// 新增</span>
<span class="kd">function</span> <span class="nx">defineReactive</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">Obejct</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="p">{</span>
		<span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
		<span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
		<span class="na">get</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">dep</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">target</span><span class="p">)</span> <span class="c1">// 新增，存储依赖</span>
			<span class="k">return</span> <span class="nx">val</span>
		<span class="p">},</span>
		<span class="na">set</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="nx">val</span> <span class="o">===</span> <span class="nx">newVal</span><span class="p">)</span> <span class="k">return</span>
		  <span class="c1">// 新增，触发依赖</span>
			<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">dep</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
				<span class="nx">dep</span><span class="p">[</span><span class="nx">i</span><span class="p">](</span><span class="nx">newVal</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
			<span class="p">}</span>
			<span class="nx">val</span> <span class="o">=</span> <span class="nx">newVal</span>
		<span class="p">}</span>
	<span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<p>我们可以封装一个 Dep 类来管理依赖，实现依赖收集、删除、向依赖发送通知：</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">Dep</span> <span class="p">{</span>
	<span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">subs</span> <span class="o">=</span> <span class="p">[]</span>
	<span class="p">}</span>

  <span class="nx">addSub</span><span class="p">(</span><span class="nx">sub</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">subs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">sub</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="nx">removeSub</span><span class="p">(</span><span class="nx">sub</span><span class="p">){</span>
    <span class="nx">remove</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">subs</span><span class="p">,</span> <span class="nx">sub</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="nx">depend</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">addSub</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">target</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">notify</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">subs</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">subs</span><span class="p">.</span><span class="nx">slice</span><span class="p">()</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">subs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">subs</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">update</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">remove</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="o">!!</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">defineReactive</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">let</span> <span class="nx">dep</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dep</span><span class="p">()</span> <span class="c1">// 修改</span>
	<span class="nx">Obejct</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="p">{</span>
		<span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
		<span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
		<span class="na">get</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">dep</span><span class="p">.</span><span class="nx">depend</span><span class="p">()</span> <span class="c1">// 修改，存储依赖</span>
			<span class="k">return</span> <span class="nx">val</span>
		<span class="p">},</span>
		<span class="na">set</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="nx">val</span> <span class="o">===</span> <span class="nx">newVal</span><span class="p">)</span> <span class="k">return</span>
			<span class="nx">dep</span><span class="p">.</span><span class="nx">notify</span><span class="p">()</span> <span class="c1">// 修改</span>
			<span class="nx">val</span> <span class="o">=</span> <span class="nx">newVal</span>
		<span class="p">}</span>
	<span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="五依赖是谁">五、依赖是谁</h2>

<p>上面我们收集的依赖是 window.target，其实就是当属性发生变化后要通知的对象，我们称为依赖。</p>

<p>依赖也可能有很多种形式，模板、用户写的一个watch…所以需要一个集中处理这些情况的类。</p>

<p>我们在依赖收集阶段只收集这个类的实例，通知也只通知它，然后它再去通知其他地方。它叫Watcher！！！</p>

<h2 id="六什么是-watcher">六、什么是 Watcher</h2>

<p>类似于一个中介，数据发生变化时通知它，它再通知其他地方。</p>

<h2 id="七递归侦测所有-key">七、递归侦测所有 key</h2>

<p>为了侦测数据中的所有属性（包括子属性），需要封装一个 Observer 类。</p>

<p>这个类的作用是将一个数据内的所有属性（包括子属性）都转换成 getter/setter 的形式，来收集属性的依赖，并且当属性发生变化时会通知这些依赖。</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">Observer</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span>

    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">value</span><span class="p">)){</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">walk</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">walk</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">keys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> 
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span> <span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
      <span class="nx">defineReactive</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">keys</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">keys</span><span class="p">[</span><span class="nx">i</span><span class="p">]])</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">defineReactive</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">//	新增，递归子属性</span>
	<span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">val</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">new</span> <span class="nx">Observer</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span>
	<span class="p">}</span>
  <span class="kd">let</span> <span class="nx">dep</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dep</span><span class="p">()</span>
	<span class="nx">Obejct</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="p">{</span>
		<span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
		<span class="na">configurable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
		<span class="na">get</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">dep</span><span class="p">.</span><span class="nx">depend</span><span class="p">()</span>
			<span class="k">return</span> <span class="nx">val</span>
		<span class="p">},</span>
		<span class="na">set</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="nx">val</span> <span class="o">===</span> <span class="nx">newVal</span><span class="p">)</span> <span class="k">return</span>
			<span class="nx">dep</span><span class="p">.</span><span class="nx">notify</span><span class="p">()</span>
			<span class="nx">val</span> <span class="o">=</span> <span class="nx">newVal</span>
		<span class="p">}</span>
	<span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="八关于-object-的问题">八、关于 Object 的问题</h2>

<p>向 obj 对象新增属性或者删除属性，Vue.js 无法侦测到这个变化，所以不会向依赖发送通知。</p>

<p>getter/setter 只能追踪一个数据是否被修改，无法追踪新增属性和删除属性。因为 js 没有提供元编程的能力。所以 Vue 提供了两个 API —— vm.$set 和 vm.$delete。</p>

<h2 id="九总结">九、总结</h2>

<ol>
  <li>Object 可以通过 defineProperty 将属性转换成 getter/setter 的形式来追踪变化，读取时触发 getter，修改数据时触发 setter；</li>
  <li>我们需要在 getter 中收集有哪些依赖使用了该数据，当 setter 触发时，去通知 getter 中收集的依赖数据发生了变化；</li>
  <li>我们创建了 Dep 来收集依赖、删除依赖和向依赖发送消息等；</li>
  <li>依赖其实就是 Watcher，只有 Watcher 触发的 getter 才会收集依赖，哪个 Watcher 触发了 getter，就把哪个 Watcher 收集到 Dep 中，当数据发生变化时，会循环依赖列表，把所有 Watcher 通知一遍；</li>
  <li>Watcher 的原理是先把自己设置到全局唯一的指定位置（例如 window.target），然后读取数据。因为读取了数据，所以会触发这个数据的 getter。接着在 getter 中就会从全局唯一的那个位置读取当前正在读取数据的 Watcher，并把这个 Watcher 收集到 Dep 中去。通过这种方式， Watcher 可以主动订阅任意一个数据的变化；</li>
  <li>我们创建看了一个 Observer 类，把一个 object 中的所有数据都转换成响应式的。</li>
</ol>

<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d20487cd-a5fa-49c3-9da7-b847e790ca9f/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d20487cd-a5fa-49c3-9da7-b847e790ca9f/Untitled.png" /></p>

<ul>
  <li>Data 通过 Observer 转换成了 getter/setter 的形式来追踪变化。</li>
  <li>当外界通过 Watcher 读取数据时，会触发 getter 从而将 Watcher 添加到依赖 Dep 中。</li>
  <li>当数据发生变化时，会触发 setter，从而向 Dep 中的依赖发送通知。</li>
  <li>Watcher 接收到通知后，会向外界发送通知，变化通知到外界后触发视图更新，也有可能触发用户的某个回调函数。</li>
</ul>
:ET