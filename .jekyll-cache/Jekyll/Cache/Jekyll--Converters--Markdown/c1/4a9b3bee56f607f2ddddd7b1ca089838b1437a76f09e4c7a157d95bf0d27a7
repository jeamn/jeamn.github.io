I"<h3 id="一按位操作符">一、按位操作符</h3>

<p>将其操作数当作32位的比特序列。</p>

<ul>
  <li>按位与（a&amp;b）：只有两个操作数相应的比特位都是1时，结果才为1，否则为0；</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>按位或（a</td>
          <td>b）：当两个操作数相应的比特位至少有一个1时，结果为1，否则为0；</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>按位异或（a^b）：当两个操作数相应的比特位有且只有一个1时，结果为1，否则为0；
    <ol>
      <li>
        <p>一个数组中有一种数出现了奇数次，其他数都出现了偶数次，找到它。</p>

        <p>解：设置一个变量eor，初始值为0，将该变量与数组的所有数异或一遍，最后eor的值就是。</p>
      </li>
    </ol>

    <p>记为：无进位相加；</p>

    <p>特点：异或运算满足交换律和结合律；</p>

    <p>例题：</p>

    <ol>
      <li>
        <p>怎么把一个int类型的数，提取出最右侧的1来。</p>

        <p>解：N &amp; ((~N)+1)</p>
      </li>
      <li>
        <p>一个数组中有两种数出现了奇数次，其他数都出现了偶数次，找到它。</p>

        <p>解：设置一个变量eor，初始值为0，将该变量与数组的所有数异或一遍，最后eor的值就是a^b且不为0，那么eor肯定有一位为1。</p>

        <p>假设第八位是1，则a的第八位和b的第八位一定是不同的。</p>

        <p>则整个数组可以分为两大类，第八位上是0的数（a，…）和第八位上是1的数（b，…）。</p>

        <p>再准备一个新的变量，eor’，计算eor’ ^ 第八位上是1的数b
 则b = eor’，a = b ^ eor</p>

        <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">function</span> <span class="nx">printOddTimesNum</span><span class="p">(</span><span class="nx">arr</span><span class="p">){</span>
     <span class="kd">let</span> <span class="nx">eor</span> <span class="o">=</span> <span class="mi">0</span>
     <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
         <span class="nx">eor</span> <span class="o">^=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
     <span class="p">}</span>
     <span class="kd">let</span> <span class="nx">rightOne</span> <span class="o">=</span> <span class="nx">eor</span> <span class="o">&amp;</span> <span class="p">(</span><span class="o">~</span><span class="nx">eor</span> <span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// 提取最右侧的1</span>
     <span class="kd">let</span> <span class="nx">onlyOne</span> <span class="o">=</span> <span class="mi">0</span>
     <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
         <span class="k">if</span><span class="p">((</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&amp;</span> <span class="nx">rightOne</span><span class="p">)</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">){</span>
             <span class="nx">onlyOne</span> <span class="o">^=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
         <span class="p">}</span>
     <span class="p">}</span>
     <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="nx">onlyOne</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">onlyOne</span> <span class="o">^</span> <span class="nx">eor</span><span class="p">}</span><span class="s2">`</span>
 <span class="p">}</span>

 <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">printOddTimesNum</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">]))</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>找出一个数的1的个数</p>

        <p>思路：不停找出最右侧的1然后消除。</p>

        <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">function</span> <span class="nx">getCount</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span>
     <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span>
     <span class="k">while</span><span class="p">(</span><span class="nx">n</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
         <span class="kd">let</span> <span class="nx">rightOne</span> <span class="o">=</span> <span class="nx">n</span> <span class="o">&amp;</span> <span class="p">(</span><span class="o">~</span><span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
         <span class="nx">count</span> <span class="o">++</span> 
         <span class="nx">n</span> <span class="o">^=</span> <span class="nx">rightOne</span>
     <span class="p">}</span>
     <span class="k">return</span> <span class="nx">count</span>
 <span class="p">}</span>

 <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getCount</span><span class="p">(</span><span class="mi">30</span><span class="p">))</span>
</code></pre></div>        </div>
      </li>
    </ol>
  </li>
  <li>按位非（~a）：反转操作数的比特位，即0变成1，1变成0；</li>
  <li>左移（a«b）：将 a 的二进制形式向左移 b (&lt; 32) 比特位，右边用0填充;</li>
  <li>有符号右移（a»b）：将 a 的二进制表示向右移 b (&lt; 32) 位，丢弃被移出的位；</li>
  <li>无符号右移（a»&gt;b）：将 a 的二进制表示向右移 b (&lt; 32) 位，丢弃被移出的位，并使用 0 在左侧填充。</li>
</ul>
:ET