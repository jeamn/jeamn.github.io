I"37<h2 id="一单调栈">一、单调栈</h2>

<p>求数组中每个元素，左边离它最近的比它小的数在哪，右边离它最近的比它小的数在哪。</p>

<p>暴力解法：遍历，复杂度为O(n^2)</p>

<p>较优解：单调栈，复杂度为 O(n)</p>

<p>已知数组 [3，4，2，5，6，0，1]</p>

<p>思路：</p>

<p>（1）先假设数组中无重复值；（2）让栈底到栈顶，从小到大；（3）出栈的时候做记录；</p>

<p>（4）让某个数出栈的数，即为该数的右边离它最近的比它小的数；（5）某个数压着的数，即为该数的左边离它最近的比它小的数；（6）每个数必须入栈一次出栈一次；</p>

<p>出入栈顺序：3入，4入，4出记录4（左3右2），3出记录3（左无右2），2入，5入，6入，6出记录6（左5右0），5出记录5（左2右0），2出记录2（左无右0），1入，1出（左0右无），0出（左无右无）</p>

<h2 id="二滑动窗口">二、滑动窗口</h2>

<h3 id="滑动窗口是什么">滑动窗口是什么？</h3>

<ul>
  <li>一种想象出来的数据结构</li>
  <li>具有左边界 L 和右边界 R</li>
  <li>在数组或者字符串或者一个序列上，记为 S，窗口就是S[L…R]这一部分</li>
  <li>L 往右滑意味着一个样本出了窗口，R 往右滑意味着一个样本进了窗口</li>
  <li>L 和 R 都只能往右滑，且 L 不大于 R</li>
</ul>

<h3 id="滑动窗口内最大值和最小值的更新结构">滑动窗口内最大值和最小值的更新结构</h3>

<ul>
  <li>窗口不管是 L 还是 R 滑动之后，都会让窗口呈现新状况。</li>
  <li>如何能够更快地得到窗口当前状况下的最大值和最小值？</li>
  <li>采取遍历的方式去寻找最大值，复杂度是 O(n)，性能较差。</li>
  <li>
    <p>最好平均下来复杂度能做到 O(1)，所以，</p>

    <p>利用单调双端队列（双向链表），即，一个数据可以从双端队列的头部进头部出，也可以从尾部进尾部出。</p>
  </li>
</ul>

<h3 id="最大值的获取过程最小值同理">最大值的获取过程（最小值同理）：</h3>

<p>原则：保证双端队列中的数，从左往右是从大到小</p>

<ul>
  <li>L 往右移动，出的时候判断：
    <ul>
      <li>双端队列头部的数是否是可以移出的（对比下标）：
        <ul>
          <li>如果是，则双端队列中的数从头部出；</li>
          <li>如果不是，不做操作；</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>R 往右移动，双端队列中的数从尾部进，进的时候需要判断：
    <ul>
      <li>当前双端队列尾部的数是否大于即将进的数：
        <ul>
          <li>如果是，则进数；</li>
          <li>如果不是，则将双端队列尾部的数移出，再进数。</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>则，此时双端队列头部的数，就是每次窗口状况的最大值。</p>

<p>双端队列可以解释成：哪些数会成为当前窗口最大值的优先级，左边优先级最高。</p>

<p>注意：双端队列中存放的是位置下标而不是具体的值，目的是为了判断头部数据是否能移除。</p>

<h3 id="题目一">题目一</h3>

<p>假设一个固定大小为 W 的窗口，依次划过 arr，返回每一次滑出状况的最大值</p>

<p>例如：arr = [4,3,5,4,3,3,6,7]，W = 3</p>

<p>返回：[5,5,5,4,6,7]</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">SlidingWindowMaxArray</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">w</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">arr</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="nx">w</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="nx">w</span><span class="p">){</span>
        <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kd">const</span> <span class="nx">qmax</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">R</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">R</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">R</span><span class="o">++</span><span class="p">){</span>
        <span class="k">while</span><span class="p">(</span><span class="nx">qmax</span><span class="p">.</span><span class="nx">length</span> <span class="o">!==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">qmax</span><span class="p">[</span><span class="nx">qmax</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span> <span class="o">&lt;=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">R</span><span class="p">]){</span>
            <span class="nx">qmax</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="nx">qmax</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">R</span><span class="p">);</span> <span class="c1">// 0 1 2 3</span>

        <span class="c1">// 如果窗口没有形成W的长度之前，不弹出数字</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">qmax</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="nx">R</span> <span class="o">-</span> <span class="nx">w</span><span class="p">){</span>
            <span class="nx">qmax</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="c1">// 以上把窗口更新做完了</span>

        <span class="c1">// 如果窗口没有形成W的长度之前，不收集头部的值</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">R</span> <span class="o">&gt;=</span> <span class="nx">w</span><span class="o">-</span><span class="mi">1</span><span class="p">){</span> 
            <span class="nx">res</span><span class="p">[</span><span class="nx">index</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">qmax</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">SlidingWindowMaxArray</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">8</span><span class="p">],</span> <span class="mi">3</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SlidingWindowMaxArray</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">getMaxWindow</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">w</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">arr</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">w</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="n">w</span><span class="o">){</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// 其中放的是位置，从大到小</span>
        <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">qmax</span> <span class="o">=</span> <span class="k">new</span>  <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">w</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="no">R</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="no">R</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="no">R</span><span class="o">++){</span>
            <span class="k">while</span><span class="o">(!</span><span class="n">qmax</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">arr</span><span class="o">[</span><span class="n">qmax</span><span class="o">.</span><span class="na">peekLast</span><span class="o">()]</span> <span class="o">&lt;=</span> <span class="n">arr</span><span class="o">[</span><span class="no">R</span><span class="o">]){</span>
                <span class="n">qmax</span><span class="o">.</span><span class="na">pollLast</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="n">qmax</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="no">R</span><span class="o">);</span>
            
            <span class="c1">// 如果窗口没有形成W的长度之前，不弹出数字</span>
            <span class="k">if</span><span class="o">(</span><span class="n">qmax</span><span class="o">.</span><span class="na">peekFirst</span><span class="o">()</span> <span class="o">==</span> <span class="no">R</span> <span class="o">-</span> <span class="n">w</span><span class="o">){</span>
                <span class="n">qmax</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="c1">// 以上把窗口更新做完了</span>
            
            <span class="c1">// 如果窗口没有形成W的长度之前，不收集头部的值</span>
            <span class="k">if</span><span class="o">(</span><span class="no">R</span> <span class="o">&gt;=</span> <span class="n">w</span><span class="o">-</span><span class="mi">1</span><span class="o">){</span>
                <span class="n">res</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">qmax</span><span class="o">.</span><span class="na">peekFirst</span><span class="o">()];</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="题目二">题目二</h3>

<p>给定一个整形数组 arr，和一个整数 num。某个 arr 中的子数组 sub，如果想达标，必须满足：</p>

<p>sub 中最大值 - sub 中最小值 ≤ num，返回 arr 中达标子数组的数量。</p>

<p>思路：某个范围如果达标，缩小范围必达标；某个范围如果不达标，扩大范围必不达标。</p>

<p>假设 L 到 R 为达标数组，且 L…L’…R’…R，则 L’…R’ 必为达标数组。</p>

<p>假设 L 到 R 为不达标数组，则 L 往左扩和 R 往右扩均为不达标数组。</p>

<p>利用两个双端队列，分别作出窗口内的最大值结构和最小值结构。</p>

<p>从 arr 的左边第一位开始往右扩，每扩一位，计算 max - min 是否 ≤ num，直到不达标的位置停，且不让该值进窗口，可以算出以 arr 第一位开始的子数组达标的数量。</p>

<p>接下来从 arr 的第二位开始往右扩，重复上面步骤，直到不达标的位置停，算出以 arr 第二位开始的子数组达标的数量。</p>

<p>即，求 0 开头的子数组数量，1 开头的子数组数量，…，复杂度为 O(n)</p>
:ET