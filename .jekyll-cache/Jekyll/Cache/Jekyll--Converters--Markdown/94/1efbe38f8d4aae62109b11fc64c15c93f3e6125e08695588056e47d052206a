I"Ϗ<h2 id="一接口">一、接口</h2>
<ul>
  <li>接口一方面可以在面向对象编程中表示为行为的抽象，另外可以用来描述对象的形状</li>
  <li>接口就是把一些类中共有的属性和方法抽象出来,可以用来约束实现此接口的类</li>
  <li>一个类可以继承另一个类并实现多个接口</li>
  <li>接口像插件一样是用来增强类的，而抽象类是具体类的抽象概念</li>
  <li>一个类可以实现多个接口，一个接口也可以被多个类实现，但一个类可以有多个子类，而只能有一个父类</li>
</ul>

<h3 id="1接口">1、接口</h3>
<ul>
  <li>interface中可以用分号或者逗号分割每一项，也可以什么都不加</li>
</ul>

<h4 id="1-对象的形状">(1) 对象的形状</h4>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//接口可以用来描述`对象的形状`,少属性或者多属性都会报错</span>
<span class="kr">interface</span> <span class="nx">Speakable</span><span class="p">{</span>
    <span class="nx">speak</span><span class="p">():</span><span class="k">void</span><span class="p">;</span>
    <span class="nx">name</span><span class="p">?:</span><span class="nx">string</span><span class="p">;</span><span class="c1">//？表示可选属性</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">speakman</span><span class="p">:</span><span class="nx">Speakable</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">speak</span><span class="p">(){},</span><span class="c1">//少属性会报错</span>
    <span class="nx">name</span><span class="p">,</span>
    <span class="nx">age</span><span class="c1">//多属性也会报错</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="2-行为的抽象">(2) 行为的抽象</h4>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//接口可以在面向对象编程中表示为行为的抽象</span>
<span class="kr">interface</span> <span class="nx">Speakable</span><span class="p">{</span>
    <span class="nx">speak</span><span class="p">():</span><span class="k">void</span><span class="p">;</span>
<span class="p">}</span>
<span class="kr">interface</span> <span class="nx">Eatable</span><span class="p">{</span>
    <span class="nx">eat</span><span class="p">():</span><span class="k">void</span>
<span class="p">}</span>
<span class="c1">//一个类可以实现多个接口</span>
<span class="kd">class</span> <span class="nx">Person</span> <span class="kr">implements</span> <span class="nx">Speakable</span><span class="p">,</span><span class="nx">Eatable</span><span class="p">{</span>
    <span class="nx">speak</span><span class="p">(){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Person说话</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">eat</span><span class="p">(){}</span>
<span class="p">}</span>
<span class="kd">class</span> <span class="nx">TangDuck</span> <span class="kr">implements</span> <span class="nx">Speakable</span><span class="p">{</span>
    <span class="nx">speak</span><span class="p">(){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">TangDuck说话</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">eat</span><span class="p">(){}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="3-任意属性">(3) 任意属性</h4>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//无法预先知道有哪些新的属性的时候,可以使用 `[propName:string]:any`,propName名字是任意的</span>
<span class="kr">interface</span> <span class="nx">Person</span> <span class="p">{</span>
  <span class="nx">readonly</span> <span class="nx">id</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
  <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="p">[</span><span class="nx">propName</span><span class="p">:</span> <span class="nx">string</span><span class="p">]:</span> <span class="nx">any</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">p1</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">id</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
  <span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">jeamn</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span><span class="mi">10</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="2接口的继承">2、接口的继承</h3>
<ul>
  <li>一个接口可以继承自另外一个接口</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Speakable</span> <span class="p">{</span>
    <span class="nx">speak</span><span class="p">():</span> <span class="k">void</span>
<span class="p">}</span>
<span class="kr">interface</span> <span class="nx">SpeakChinese</span> <span class="kd">extends</span> <span class="nx">Speakable</span> <span class="p">{</span>
    <span class="nx">speakChinese</span><span class="p">():</span> <span class="k">void</span>
<span class="p">}</span>
<span class="kd">class</span> <span class="nx">Person</span> <span class="kr">implements</span> <span class="nx">SpeakChinese</span> <span class="p">{</span>
    <span class="nx">speak</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Person</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">speakChinese</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">speakChinese</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="3readonly">3、readonly</h3>
<ul>
  <li>用 readonly 定义只读属性可以避免由于多人协作或者项目较为复杂等因素造成对象的值被重写
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Person</span><span class="p">{</span>
<span class="nx">readonly</span> <span class="nx">id</span><span class="p">:</span><span class="nx">number</span><span class="p">;</span>
<span class="nl">name</span><span class="p">:</span><span class="nx">string</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">tom</span><span class="p">:</span><span class="nx">Person</span> <span class="o">=</span> <span class="p">{</span>
<span class="na">id</span> <span class="p">:</span><span class="mi">1</span><span class="p">,</span>
<span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">jeamn</span><span class="dl">'</span>
<span class="p">}</span>
<span class="nx">tom</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="4函数类型接口">4、函数类型接口</h3>
<ul>
  <li>对方法传入的参数和返回值进行约束</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">discount</span><span class="p">{</span>
  <span class="p">(</span><span class="nx">price</span><span class="p">:</span><span class="nx">number</span><span class="p">):</span><span class="nx">number</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">cost</span><span class="p">:</span><span class="nx">discount</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">price</span><span class="p">:</span><span class="nx">number</span><span class="p">):</span><span class="nx">number</span><span class="p">{</span>
   <span class="k">return</span> <span class="nx">price</span> <span class="o">*</span> <span class="p">.</span><span class="mi">8</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="5可索引接口">5、可索引接口</h3>
<ul>
  <li>对数组和对象进行约束</li>
  <li>userInterface 表示：只要 index 的类型是 number，那么值的类型必须是 string</li>
  <li>UserInterface2 表示：只要 index 的类型是 string，那么值的类型必须是 string</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">UserInterface</span> <span class="p">{</span>
  <span class="p">[</span><span class="nx">index</span><span class="p">:</span><span class="nx">number</span><span class="p">]:</span><span class="nx">string</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">arr</span><span class="p">:</span><span class="nx">UserInterface</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">a1</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">a2</span><span class="dl">'</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span>

<span class="kr">interface</span> <span class="nx">UserInterface2</span> <span class="p">{</span>
  <span class="p">[</span><span class="nx">index</span><span class="p">:</span><span class="nx">string</span><span class="p">]:</span><span class="nx">string</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">obj</span><span class="p">:</span><span class="nx">UserInterface2</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">jeamn</span><span class="dl">'</span><span class="p">};</span>
</code></pre></div></div>

<h3 id="6类接口">6、类接口</h3>
<ul>
  <li>对类的约束</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Speakable</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nx">speak</span><span class="p">(</span><span class="nx">words</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="k">void</span>
<span class="p">}</span>
<span class="kd">class</span> <span class="nx">Dog</span> <span class="kr">implements</span> <span class="nx">Speakable</span> <span class="p">{</span>
    <span class="nx">name</span><span class="o">!</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nx">speak</span><span class="p">(</span><span class="nx">words</span><span class="p">:</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">words</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">dog</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dog</span><span class="p">();</span>
<span class="nx">dog</span><span class="p">.</span><span class="nx">speak</span><span class="p">(</span><span class="dl">'</span><span class="s1">汪汪汪</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="7构造函数的类型">7、构造函数的类型</h3>
<ul>
  <li>在 TypeScript 中，我们可以用 interface 来描述类</li>
  <li>同时也可以使用interface里特殊的new()关键字来描述类的构造函数类型</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Animal</span><span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="kr">public</span> <span class="nx">name</span><span class="p">:</span><span class="nx">string</span><span class="p">){</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kr">interface</span> <span class="nx">WithNameClass</span><span class="p">{</span>
  <span class="k">new</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span><span class="nx">string</span><span class="p">):</span><span class="nx">Animal</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">createAnimal</span><span class="p">(</span><span class="nx">clazz</span><span class="p">:</span><span class="nx">WithNameClass</span><span class="p">,</span><span class="nx">name</span><span class="p">:</span><span class="nx">string</span><span class="p">){</span>
   <span class="k">return</span> <span class="k">new</span> <span class="nx">clazz</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">createAnimal</span><span class="p">(</span><span class="nx">Animal</span><span class="p">,</span><span class="dl">'</span><span class="s1">mike</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="二泛型">二、泛型</h2>
<ul>
  <li>泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性</li>
  <li>泛型T作用域只限于函数内部使用</li>
</ul>

<h3 id="1泛型函数">1、泛型函数</h3>
<p>首先，我们来实现一个函数 createArray，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">createArray</span><span class="p">(</span><span class="nx">length</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">value</span><span class="p">:</span> <span class="nx">any</span><span class="p">):</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">any</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="na">result</span><span class="p">:</span> <span class="nx">any</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">result</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">createArray</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</code></pre></div></div>
<p>使用了泛型</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">createArray</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">length</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">value</span><span class="p">:</span> <span class="nx">T</span><span class="p">):</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="na">result</span><span class="p">:</span> <span class="nx">T</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">result</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
  <span class="p">}</span>
<span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">createArray2</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="2类数组">2、类数组</h3>
<ul>
  <li>类数组（Array-like Object）不是数组类型，比如 arguments</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">sum</span><span class="p">(...</span><span class="nx">parameters</span><span class="p">:</span> <span class="nx">number</span><span class="p">[])</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">args</span><span class="p">:</span> <span class="nx">IArguments</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">args</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">root</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">root</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">children</span><span class="p">:</span> <span class="nx">HTMLCollection</span> <span class="o">=</span> <span class="p">(</span><span class="nx">root</span> <span class="k">as</span> <span class="nx">HTMLElement</span><span class="p">).</span><span class="nx">children</span><span class="p">;</span>
<span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">nodeList</span><span class="p">:</span> <span class="nx">NodeList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">root</span> <span class="k">as</span> <span class="nx">HTMLElement</span><span class="p">).</span><span class="nx">childNodes</span><span class="p">;</span>
<span class="nx">nodeList</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="3泛型类">3、泛型类</h3>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">MyArray</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">{</span>
    <span class="kr">private</span> <span class="na">list</span><span class="p">:</span><span class="nx">T</span><span class="p">[]</span><span class="o">=</span><span class="p">[];</span>
    <span class="nx">add</span><span class="p">(</span><span class="na">value</span><span class="p">:</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">list</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">getMax</span><span class="p">():</span><span class="nx">T</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">result</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">list</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">&gt;</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">result</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">arr</span><span class="o">=</span><span class="k">new</span> <span class="nx">MyArray</span><span class="p">();</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">ret</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">getMax</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ret</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="4泛型接口">4、泛型接口</h3>
<ul>
  <li>泛型接口可以用来约束函数</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Calculate</span><span class="p">{</span>
  <span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span><span class="nx">T</span><span class="p">,</span><span class="nx">b</span><span class="p">:</span><span class="nx">T</span><span class="p">):</span><span class="nx">T</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">add</span><span class="p">:</span><span class="nx">Calculate</span> <span class="o">=</span> <span class="kd">function</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span><span class="nx">T</span><span class="p">,</span><span class="nx">b</span><span class="p">:</span><span class="nx">T</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">a</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">add</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</code></pre></div></div>
<ul>
  <li>定义接口的时候也可以指定泛型</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Cart</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">{</span>
  <span class="na">list</span><span class="p">:</span><span class="nx">T</span><span class="p">[]</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">cart</span><span class="p">:</span><span class="nx">Cart</span><span class="o">&lt;</span><span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span><span class="na">price</span><span class="p">:</span><span class="nx">number</span><span class="p">}</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">list</span><span class="p">:[{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">jeamn</span><span class="dl">'</span><span class="p">,</span><span class="na">price</span><span class="p">:</span><span class="mi">10</span><span class="p">}]</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cart</span><span class="p">.</span><span class="nx">list</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">name</span><span class="p">,</span><span class="nx">cart</span><span class="p">.</span><span class="nx">list</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">price</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="5多个类型参数">5、多个类型参数</h3>
<ul>
  <li>泛型可以有多个</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">swap</span><span class="o">&lt;</span><span class="nx">A</span><span class="p">,</span><span class="nx">B</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">tuple</span><span class="p">:[</span><span class="nx">A</span><span class="p">,</span><span class="nx">B</span><span class="p">]):[</span><span class="nx">B</span><span class="p">,</span><span class="nx">A</span><span class="p">]{</span>
  <span class="k">return</span> <span class="p">[</span><span class="nx">tuple</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">tuple</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">swapped</span> <span class="o">=</span> <span class="nx">swap</span><span class="o">&lt;</span><span class="nx">string</span><span class="p">,</span><span class="nx">number</span><span class="o">&gt;</span><span class="p">([</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span><span class="mi">1</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">swapped</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">swapped</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">swapped</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">length</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="6默认泛型类型">6、默认泛型类型</h3>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">createArray3</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">=</span><span class="nx">number</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">length</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">value</span><span class="p">:</span> <span class="nx">T</span><span class="p">):</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="na">result</span><span class="p">:</span> <span class="nx">T</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">result</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">result2</span> <span class="o">=</span> <span class="nx">createArray3</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result2</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="7泛型约束">7、泛型约束</h3>
<ul>
  <li>在函数中使用泛型的时候，由于预先并不知道泛型的类型，所以不能随意访问相应类型的属性或方法。</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">logger</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">val</span><span class="p">:</span> <span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">val</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">//直接访问会报错</span>
<span class="p">}</span>
<span class="c1">//可以让泛型继承一个接口</span>
<span class="kr">interface</span> <span class="nx">LengthWise</span> <span class="p">{</span>
    <span class="nl">length</span><span class="p">:</span> <span class="nx">number</span>
<span class="p">}</span>
<span class="c1">//可以让泛型继承一个接口</span>
<span class="kd">function</span> <span class="nx">logger2</span><span class="o">&lt;</span><span class="nx">T</span> <span class="kd">extends</span> <span class="nx">LengthWise</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">val</span><span class="p">:</span> <span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">val</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">logger2</span><span class="p">(</span><span class="dl">'</span><span class="s1">jeamn</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">logger2</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="8泛型类型别名">8、泛型类型别名</h3>
<ul>
  <li>泛型类型别名可以表达更复杂的类型</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">type</span> <span class="nx">Cart</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span><span class="na">list</span><span class="p">:</span><span class="nx">T</span><span class="p">[]}</span> <span class="o">|</span> <span class="nx">T</span><span class="p">[];</span>
<span class="kd">let</span> <span class="nx">c1</span><span class="p">:</span><span class="nx">Cart</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span><span class="na">list</span><span class="p">:[</span><span class="dl">'</span><span class="s1">1</span><span class="dl">'</span><span class="p">]};</span>
<span class="kd">let</span> <span class="nx">c2</span><span class="p">:</span><span class="nx">Cart</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</code></pre></div></div>

<h3 id="9泛型接口-vs-泛型类型别名">9、泛型接口 vs 泛型类型别名</h3>
<ul>
  <li>接口创建了一个新的名字，它可以在其他任意地方被调用。而类型别名并不创建新的名字，例如报错信息就不会使用别名</li>
  <li>类型别名不能被 extends和 implements,这时我们应该尽量使用接口代替类型别名</li>
  <li>当我们需要使用联合类型或者元组类型的时候，类型别名会更合适</li>
</ul>
:ET