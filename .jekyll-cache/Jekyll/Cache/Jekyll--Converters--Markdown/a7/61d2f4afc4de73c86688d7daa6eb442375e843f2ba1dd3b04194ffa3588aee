I"ҋ<h2 id="一结构类型系统">一、结构类型系统</h2>
<h3 id="1接口的兼容性">1、接口的兼容性</h3>
<ul>
  <li>如果传入的变量和声明的类型不匹配，TS就会进行兼容性检查</li>
  <li>原理是Duck-Check,就是说只要目标类型中声明的属性变量在源类型中都存在就是兼容的</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Animal</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">age</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Person</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">age</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
    <span class="nl">gender</span><span class="p">:</span> <span class="nx">number</span>
<span class="p">}</span>
<span class="c1">// 要判断目标类型`Person`是否能够兼容输入的源类型`Animal`</span>
<span class="kd">function</span> <span class="nx">getName</span><span class="p">(</span><span class="nx">animal</span><span class="p">:</span> <span class="nx">Animal</span><span class="p">):</span> <span class="nx">string</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">animal</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">p</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">jeamn</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
    <span class="na">gender</span><span class="p">:</span> <span class="mi">0</span>
<span class="p">}</span>

<span class="nx">getName</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span>
<span class="c1">//只有在传参的时候两个变量之间才会进行兼容性的比较，赋值的时候并不会比较,会直接报错</span>
<span class="kd">let</span> <span class="nx">a</span><span class="p">:</span> <span class="nx">Animal</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">jeamn</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
    <span class="na">gender</span><span class="p">:</span> <span class="mi">0</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="2基本类型的兼容性">2、基本类型的兼容性</h3>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//基本数据类型也有兼容性判断</span>
<span class="kd">let</span> <span class="nx">num</span> <span class="p">:</span> <span class="nx">string</span><span class="o">|</span><span class="nx">number</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">str</span><span class="p">:</span><span class="nx">string</span><span class="o">=</span><span class="dl">'</span><span class="s1">jeamn</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">num</span> <span class="o">=</span> <span class="nx">str</span><span class="p">;</span>

<span class="c1">//只要有toString()方法就可以赋给字符串变量</span>
<span class="kd">let</span> <span class="nx">num2</span> <span class="p">:</span> <span class="p">{</span>
  <span class="nx">toString</span><span class="p">():</span><span class="nx">string</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">str2</span><span class="p">:</span><span class="nx">string</span><span class="o">=</span><span class="dl">'</span><span class="s1">mike</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">num2</span> <span class="o">=</span> <span class="nx">str2</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="3类的兼容性">3、类的兼容性</h3>
<ul>
  <li>在TS中是结构类型系统，只会对比结构而不在意类型</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Animal</span><span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span><span class="nx">string</span>
<span class="p">}</span>
<span class="kd">class</span> <span class="nx">Bird</span> <span class="kd">extends</span> <span class="nx">Animal</span><span class="p">{</span>
   <span class="nl">swing</span><span class="p">:</span><span class="nx">number</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">a</span><span class="p">:</span><span class="nx">Animal</span><span class="p">;</span>
<span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Bird</span><span class="p">();</span>

<span class="kd">let</span> <span class="nx">b</span><span class="p">:</span><span class="nx">Bird</span><span class="p">;</span>
<span class="c1">//并不是父类兼容子类，子类不兼容父类</span>
<span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Animal</span><span class="p">();</span>
</code></pre></div></div>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Animal</span><span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span><span class="nx">string</span>
<span class="p">}</span>
<span class="c1">//如果父类和子类结构一样，也可以的</span>
<span class="kd">class</span> <span class="nx">Bird</span> <span class="kd">extends</span> <span class="nx">Animal</span><span class="p">{}</span>

<span class="kd">let</span> <span class="nx">a</span><span class="p">:</span><span class="nx">Animal</span><span class="p">;</span>
<span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Bird</span><span class="p">();</span>

<span class="kd">let</span> <span class="nx">b</span><span class="p">:</span><span class="nx">Bird</span><span class="p">;</span>
<span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Animal</span><span class="p">();</span>
</code></pre></div></div>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//甚至没有关系的两个类的实例也是可以的</span>
<span class="kd">class</span> <span class="nx">Animal</span><span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span><span class="nx">string</span>
<span class="p">}</span>
<span class="kd">class</span> <span class="nx">Bird</span><span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span><span class="nx">string</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">a</span><span class="p">:</span><span class="nx">Animal</span> <span class="p">;</span>
<span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Bird</span><span class="p">();</span>
<span class="kd">let</span> <span class="nx">b</span><span class="p">:</span><span class="nx">Bird</span><span class="p">;</span>
<span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Animal</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="4函数的兼容性">4、函数的兼容性</h3>
<ul>
  <li>比较函数的时候是要先比较函数的参数，再比较函数的返回值</li>
</ul>

<h4 id="1比较参数">(1)比较参数</h4>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">type</span> <span class="nx">sumFunc</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">:</span><span class="nx">number</span><span class="p">,</span><span class="nx">b</span><span class="p">:</span><span class="nx">number</span><span class="p">)</span><span class="o">=&gt;</span><span class="nx">number</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">sum</span><span class="p">:</span><span class="nx">sumFunc</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">f1</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span><span class="nx">number</span><span class="p">,</span><span class="nx">b</span><span class="p">:</span><span class="nx">number</span><span class="p">):</span><span class="nx">number</span><span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">sum</span> <span class="o">=</span> <span class="nx">f1</span><span class="p">;</span>

<span class="c1">//可以省略一个参数</span>
<span class="kd">function</span> <span class="nx">f2</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span><span class="nx">number</span><span class="p">):</span><span class="nx">number</span><span class="p">{</span>
   <span class="k">return</span> <span class="nx">a</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">sum</span> <span class="o">=</span> <span class="nx">f2</span><span class="p">;</span>

<span class="c1">//可以省略二个参数</span>
<span class="kd">function</span> <span class="nx">f3</span><span class="p">():</span><span class="nx">number</span><span class="p">{</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">sum</span> <span class="o">=</span> <span class="nx">f3</span><span class="p">;</span>

 <span class="c1">//多一个参数可不行</span>
<span class="kd">function</span> <span class="nx">f4</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span><span class="nx">number</span><span class="p">,</span><span class="nx">b</span><span class="p">:</span><span class="nx">number</span><span class="p">,</span><span class="nx">c</span><span class="p">:</span><span class="nx">number</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="nx">c</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">sum</span> <span class="o">=</span> <span class="nx">f4</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="2比较返回值">(2)比较返回值</h4>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">type</span> <span class="nx">GetPerson</span> <span class="o">=</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span><span class="na">age</span><span class="p">:</span><span class="nx">number</span><span class="p">};</span>
<span class="kd">let</span> <span class="nx">getPerson</span><span class="p">:</span><span class="nx">GetPerson</span><span class="p">;</span>
<span class="c1">//返回值一样可以</span>
<span class="kd">function</span> <span class="nx">g1</span><span class="p">(){</span>
    <span class="k">return</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">jeamn</span><span class="dl">'</span><span class="p">,</span><span class="na">age</span><span class="p">:</span><span class="mi">10</span><span class="p">};</span>
<span class="p">}</span>
<span class="nx">getPerson</span> <span class="o">=</span> <span class="nx">g1</span><span class="p">;</span>
<span class="c1">//返回值多一个属性也可以</span>
<span class="kd">function</span> <span class="nx">g2</span><span class="p">(){</span>
    <span class="k">return</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">jeamn</span><span class="dl">'</span><span class="p">,</span><span class="na">age</span><span class="p">:</span><span class="mi">10</span><span class="p">,</span><span class="na">gender</span><span class="p">:</span><span class="dl">'</span><span class="s1">male</span><span class="dl">'</span><span class="p">};</span>
<span class="p">}</span>
<span class="nx">getPerson</span> <span class="o">=</span> <span class="nx">g2</span><span class="p">;</span>
<span class="c1">//返回值少一个属性可不行</span>
<span class="kd">function</span> <span class="nx">g3</span><span class="p">(){</span>
    <span class="k">return</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">jeamn</span><span class="dl">'</span><span class="p">};</span>
<span class="p">}</span>
<span class="nx">getPerson</span> <span class="o">=</span> <span class="nx">g3</span><span class="p">;</span>
<span class="c1">//因为有可能要调用返回值上的方法</span>
<span class="nx">getPerson</span><span class="p">().</span><span class="nx">age</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="5函数参数的协变">5、函数参数的协变</h3>
<ul>
  <li>目标如果能够兼容源就是可以的</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">type</span> <span class="nx">LogFunc</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">:</span><span class="nx">number</span><span class="o">|</span><span class="nx">string</span><span class="p">)</span><span class="o">=&gt;</span><span class="k">void</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">log</span><span class="p">:</span><span class="nx">LogFunc</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">log1</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span><span class="nx">number</span><span class="o">|</span><span class="nx">string</span><span class="o">|</span><span class="nx">boolean</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">//目标如果能够兼容源就是可以的</span>
<span class="nx">log</span> <span class="o">=</span> <span class="nx">log1</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="6泛型的兼容性">6、泛型的兼容性</h3>
<ul>
  <li>泛型在判断兼容性的时候会先判断具体的类型,然后再进行兼容性判断</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//接口内容为空没用到泛型的时候是可以的</span>
<span class="c1">//1.接口内容为空没用到泛型的时候是可以的</span>
<span class="kr">interface</span> <span class="nx">Empty</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">{}</span>
<span class="kd">let</span> <span class="nx">x</span><span class="o">!</span><span class="p">:</span><span class="nx">Empty</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">y</span><span class="o">!</span><span class="p">:</span><span class="nx">Empty</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span><span class="p">;</span>
<span class="nx">x</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>

<span class="c1">//2.接口内容不为空的时候不可以</span>
<span class="kr">interface</span> <span class="nx">NotEmpty</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">{</span>
  <span class="na">data</span><span class="p">:</span><span class="nx">T</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">x1</span><span class="o">!</span><span class="p">:</span><span class="nx">NotEmpty</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">y1</span><span class="o">!</span><span class="p">:</span><span class="nx">NotEmpty</span><span class="o">&lt;</span><span class="nx">number</span><span class="o">&gt;</span><span class="p">;</span>
<span class="nx">x1</span> <span class="o">=</span> <span class="nx">y1</span><span class="p">;</span>

<span class="c1">//实现原理如下,称判断具体的类型再判断兼容性</span>
<span class="kr">interface</span> <span class="nx">NotEmptyString</span><span class="p">{</span>
    <span class="nl">data</span><span class="p">:</span><span class="nx">string</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">NotEmptyNumber</span><span class="p">{</span>
    <span class="nl">data</span><span class="p">:</span><span class="nx">number</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">xx2</span><span class="o">!</span><span class="p">:</span><span class="nx">NotEmptyString</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">yy2</span><span class="o">!</span><span class="p">:</span><span class="nx">NotEmptyNumber</span><span class="p">;</span>
<span class="nx">xx2</span> <span class="o">=</span> <span class="nx">yy2</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="7枚举的兼容性">7、枚举的兼容性</h3>
<ul>
  <li>枚举类型与数字类型兼容，并且数字类型与枚举类型兼容</li>
  <li>不同枚举类型之间是不兼容的</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//数字可以赋给枚举</span>
<span class="kr">enum</span> <span class="nx">Colors</span> <span class="p">{</span><span class="nx">Red</span><span class="p">,</span><span class="nx">Yellow</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">c</span><span class="p">:</span><span class="nx">Colors</span><span class="p">;</span>
<span class="nx">c</span> <span class="o">=</span> <span class="nx">Colors</span><span class="p">.</span><span class="nx">Red</span><span class="p">;</span>
<span class="nx">c</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="nx">c</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">1</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">//枚举值可以赋给数字</span>
<span class="kd">let</span> <span class="nx">n</span><span class="p">:</span><span class="nx">number</span><span class="p">;</span>
<span class="nx">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="nx">n</span> <span class="o">=</span> <span class="nx">Colors</span><span class="p">.</span><span class="nx">Red</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="二类型保护">二、类型保护</h2>
<ul>
  <li>类型保护就是一些表达式，他们在编译的时候就能通过类型信息确保某个作用域内变量的类型</li>
  <li>类型保护就是能够通过关键字判断出分支中的类型</li>
</ul>

<h3 id="1typeof-类型保护">1、typeof 类型保护</h3>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">double</span><span class="p">(</span><span class="nx">input</span><span class="p">:</span> <span class="nx">string</span> <span class="o">|</span> <span class="nx">number</span> <span class="o">|</span> <span class="nx">boolean</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">input</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">input</span> <span class="o">+</span> <span class="nx">input</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">input</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">number</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">input</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="o">!</span><span class="nx">input</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="2instanceof-类型保护">2、instanceof 类型保护</h3>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Animal</span> <span class="p">{</span>
    <span class="nx">name</span><span class="o">!</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">class</span> <span class="nx">Bird</span> <span class="kd">extends</span> <span class="nx">Animal</span> <span class="p">{</span>
    <span class="nx">swing</span><span class="o">!</span><span class="p">:</span> <span class="nx">number</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">getName</span><span class="p">(</span><span class="nx">animal</span><span class="p">:</span> <span class="nx">Animal</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">animal</span> <span class="k">instanceof</span> <span class="nx">Bird</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">animal</span><span class="p">.</span><span class="nx">swing</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">animal</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="3null保护">3、null保护</h3>
<ul>
  <li>如果开启了 strictNullChecks 选项，那么对于可能为 null 的变量不能调用它上面的方法和属性</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getFirstLetter</span><span class="p">(</span><span class="nx">s</span><span class="p">:</span> <span class="nx">string</span> <span class="o">|</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//第一种方式是加上null判断</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">s</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="dl">''</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">//第二种处理是增加一个或的处理</span>
    <span class="nx">s</span> <span class="o">=</span> <span class="nx">s</span> <span class="o">||</span> <span class="dl">''</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">//它并不能处理一些复杂的判断，需要加非空断言操作符</span>
<span class="kd">function</span> <span class="nx">getFirstLetter2</span><span class="p">(</span><span class="nx">s</span><span class="p">:</span> <span class="nx">string</span> <span class="o">|</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nx">log</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s</span><span class="o">!</span><span class="p">.</span><span class="nx">trim</span><span class="p">());</span>
    <span class="p">}</span>
    <span class="nx">s</span> <span class="o">=</span> <span class="nx">s</span> <span class="o">||</span> <span class="dl">''</span><span class="p">;</span>
    <span class="nx">log</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="4链判断运算符">4、链判断运算符</h3>
<ul>
  <li>链判断运算符是一种先检查属性是否存在，再尝试访问该属性的运算符，其符号为 ?.</li>
  <li>如果运算符左侧的操作数 ?. 计算为 undefined 或 null，则表达式求值为 undefined 。否则，正常触发目标属性访问，方法或函数调用。</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">a</span><span class="p">?.</span><span class="nx">b</span><span class="p">;</span> <span class="c1">//如果a是null/undefined,那么返回undefined，否则返回a.b的值.</span>
<span class="nx">a</span> <span class="o">==</span> <span class="kc">null</span> <span class="p">?</span> <span class="kc">undefined</span> <span class="p">:</span> <span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span>

<span class="nx">a</span><span class="p">?.[</span><span class="nx">x</span><span class="p">];</span> <span class="c1">//如果a是null/undefined,那么返回undefined，否则返回a[x]的值</span>
<span class="nx">a</span> <span class="o">==</span> <span class="kc">null</span> <span class="p">?</span> <span class="kc">undefined</span> <span class="p">:</span> <span class="nx">a</span><span class="p">[</span><span class="nx">x</span><span class="p">];</span>

<span class="nx">a</span><span class="p">?.</span><span class="nx">b</span><span class="p">();</span> <span class="c1">// 如果a是null/undefined,那么返回undefined</span>
<span class="nx">a</span> <span class="o">==</span> <span class="kc">null</span> <span class="p">?</span> <span class="kc">undefined</span> <span class="p">:</span> <span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">();</span> <span class="c1">//如果a.b不函数的话抛类型错误异常,否则计算a.b()的结果</span>

<span class="nx">a</span><span class="p">?.();</span> <span class="c1">//如果a是null/undefined,那么返回undefined</span>
<span class="nx">a</span> <span class="o">==</span> <span class="kc">null</span> <span class="p">?</span> <span class="kc">undefined</span> <span class="p">:</span> <span class="nx">a</span><span class="p">();</span> <span class="c1">//如果A不是函数会抛出类型错误，否则调用a这个函数</span>
</code></pre></div></div>
<blockquote>
  <p>链判断运算符 还处于 stage1 阶段,TS 也暂时不支持</p>
</blockquote>

<h3 id="5可辨识的联合类型">5、可辨识的联合类型</h3>
<ul>
  <li>就是利用联合类型中的共有字段进行类型保护的一种技巧</li>
  <li>相同字段的不同取值就是可辨识</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">WarningButton</span><span class="p">{</span>
  <span class="nl">class</span><span class="p">:</span><span class="dl">'</span><span class="s1">warning</span><span class="dl">'</span><span class="p">,</span>
  <span class="nx">text1</span><span class="p">:</span><span class="dl">'</span><span class="s1">修改</span><span class="dl">'</span>
<span class="p">}</span>
<span class="kr">interface</span> <span class="nx">DangerButton</span><span class="p">{</span>
  <span class="nl">class</span><span class="p">:</span><span class="dl">'</span><span class="s1">danger</span><span class="dl">'</span><span class="p">,</span>
  <span class="nx">text2</span><span class="p">:</span><span class="dl">'</span><span class="s1">删除</span><span class="dl">'</span>
<span class="p">}</span>
<span class="nx">type</span> <span class="nx">Button</span> <span class="o">=</span> <span class="nx">WarningButton</span><span class="o">|</span><span class="nx">DangerButton</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">getButton</span><span class="p">(</span><span class="nx">button</span><span class="p">:</span><span class="nx">Button</span><span class="p">){</span>
 <span class="k">if</span><span class="p">(</span><span class="nx">button</span><span class="p">.</span><span class="kd">class</span><span class="o">==</span><span class="dl">'</span><span class="s1">warning</span><span class="dl">'</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">button</span><span class="p">.</span><span class="nx">text1</span><span class="p">);</span>
 <span class="p">}</span>
 <span class="k">if</span><span class="p">(</span><span class="nx">button</span><span class="p">.</span><span class="kd">class</span><span class="o">==</span><span class="dl">'</span><span class="s1">danger</span><span class="dl">'</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">button</span><span class="p">.</span><span class="nx">text2</span><span class="p">);</span>
 <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="6in操作符">6、in操作符</h3>
<ul>
  <li>in 运算符可以被用于参数类型的判断</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Bird</span> <span class="p">{</span>
    <span class="nl">swing</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Dog</span> <span class="p">{</span>
    <span class="nl">leg</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">getNumber</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span> <span class="nx">Bird</span> <span class="o">|</span> <span class="nx">Dog</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="dl">"</span><span class="s2">swing</span><span class="dl">"</span> <span class="k">in</span> <span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">x</span><span class="p">.</span><span class="nx">swing</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">x</span><span class="p">.</span><span class="nx">leg</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="7自定义的类型保护">7、自定义的类型保护</h3>
<ul>
  <li>TypeScript 里的类型保护本质上就是一些表达式，它们会在运行时检查类型信息，以确保在某个作用域里的类型是符合预期的
-要自定义一个类型保护，只需要简单地为这个类型保护定义一个函数即可，这个函数的返回值是一个类型谓词</li>
  <li>类型谓词的语法为 parameterName is Type 这种形式，其中 parameterName 必须是当前函数签名里的一个参数名`</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Bird</span> <span class="p">{</span>
  <span class="nl">swing</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Dog</span> <span class="p">{</span>
  <span class="nl">leg</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">//没有相同字段可以定义一个类型保护函数</span>
<span class="kd">function</span> <span class="nx">isBird</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span><span class="nx">Bird</span><span class="o">|</span><span class="nx">Dog</span><span class="p">):</span> <span class="nx">x</span> <span class="nx">is</span> <span class="nx">Bird</span><span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span><span class="o">&lt;</span><span class="nx">Bird</span><span class="o">&gt;</span><span class="nx">x</span><span class="p">).</span><span class="nx">swing</span> <span class="o">==</span> <span class="mi">2</span><span class="p">;</span>
  <span class="k">return</span> <span class="p">(</span><span class="nx">x</span> <span class="k">as</span> <span class="nx">Bird</span><span class="p">).</span><span class="nx">swing</span> <span class="o">==</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">getAnimal</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span> <span class="nx">Bird</span> <span class="o">|</span> <span class="nx">Dog</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">isBird</span><span class="p">(</span><span class="nx">x</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span><span class="p">.</span><span class="nx">swing</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">x</span><span class="p">.</span><span class="nx">leg</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
:ET