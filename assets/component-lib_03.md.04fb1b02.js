import{_ as e,o as l,c as i,Q as o}from"./chunks/framework.6a4c7ee0.js";const h=JSON.parse('{"title":"组件设计原则","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"component-lib/03.md","filePath":"component-lib/03.md"}'),t={name:"component-lib/03.md"},c=o('<h1 id="组件设计原则" tabindex="-1">组件设计原则 <a class="header-anchor" href="#组件设计原则" aria-label="Permalink to &quot;组件设计原则&quot;">​</a></h1><p>在设计组件之前，我们需要先了解一下组件的设计原则。遵守这些常见的设计原则，可帮助我们创建高质量、可重用、易用的组件。</p><h2 id="一、组件设计原则" tabindex="-1">一、组件设计原则 <a class="header-anchor" href="#一、组件设计原则" aria-label="Permalink to &quot;一、组件设计原则&quot;">​</a></h2><ul><li><p>单一职责原则（Single Responsibility Principle）：每个组件应该只关注一个特定的功能或任务。这有助于组件的内聚性和可维护性。</p></li><li><p>可重用性（Reusability）：组件应该被设计为可在不同上下文中重复使用。通过提供清晰的接口和灵活的配置选项，使组件能够适应多种使用场景。</p></li><li><p>可组合性（Composability）：组件应该能够与其他组件无缝组合，形成更复杂的用户界面。这可以通过良好的抽象和明确的接口来实现。</p></li><li><p>可定制性（Customizability）：组件应该具有一定的定制性，允许用户根据自己的需求进行配置和样式化。提供适当的选项和参数，以满足不同用户的需求。</p></li><li><p>可访问性（Accessibility）：组件应该遵循无障碍设计原则，以确保人们使用辅助技术或具有不同能力的用户都能够访问和使用组件。</p></li><li><p>易用性（Usability）：组件应该易于使用和理解。提供清晰的文档、示例和良好的用户体验，以降低学习成本并提高用户满意度。</p></li><li><p>高性能（Performance）：组件应该经过优化，以提供快速的响应和流畅的用户体验。避免不必要的渲染、重绘和资源消耗。</p></li><li><p>一致性（Consistency）：组件应该与整体设计系统或风格指南保持一致，以确保用户界面的统一性和可预测性。</p></li><li><p>可测试性（Testability）：组件应该易于测试，以便能够进行自动化测试和保证组件的质量。</p></li></ul><h2 id="二、组件涉及文件说明" tabindex="-1">二、组件涉及文件说明 <a class="header-anchor" href="#二、组件涉及文件说明" aria-label="Permalink to &quot;二、组件涉及文件说明&quot;">​</a></h2><p>根据组件设计原则，我们开发一个完整组件如 <code>Button 组件</code>，一般会包含以下几个文件：</p><ul><li>主入口文件：<code>index.ts</code></li></ul><blockquote><p>组件注册、导出</p></blockquote><ul><li>组件文件：<code>index.vue</code></li></ul><blockquote><p>组件逻辑、模板</p></blockquote><ul><li>组件样式文件：<code>style.css</code></li></ul><blockquote><p>组件的样式，我们采用 postcss 来书写组件的样式</p></blockquote><ul><li>组件测试文件：<code>Button.spec.ts</code></li></ul><blockquote><p>组件的单元测试，我们通过 Vitest 来进行组件的单元测试</p></blockquote><ul><li>组件文档文件：<code>Button.md</code></li></ul><blockquote><p>组件的使用文档，在本项目中，我们使用 VitePress 来搭建组件的使用文档，所以组件的使用文档文件会统一放在根目录下的 <code>docs</code> 文件夹中。</p></blockquote><h2 id="三、组件-api-设计" tabindex="-1">三、组件 API 设计 <a class="header-anchor" href="#三、组件-api-设计" aria-label="Permalink to &quot;三、组件 API 设计&quot;">​</a></h2><p>在设计组件 API 时，我们需要考虑以下几个问题：</p><ul><li>组件的功能是什么？</li><li>组件的使用场景是什么？</li><li>组件的使用方式是什么？</li><li>组件的默认值是什么？</li><li>组件的可选值是什么？</li><li>组件的事件有哪些？</li><li>组件的插槽有哪些？</li></ul><p>所以，我们在设计组件 API 时，需要考虑到组件的功能、使用场景、使用方式、默认值、可选值、事件和插槽等。基于以上这些点，组件的 API 设计应该或者可能包含：</p><ul><li>组件的属性：<code>Attributes</code></li><li>组件的事件：<code>Events</code></li><li>组件的插槽：<code>Slots</code></li><li>组件的导出：<code>Exposes</code></li></ul><p>组件的导出属性，是 Vue 3 新增的一个特性，它可以将组件内部的属性导出到组件实例上，以便在组件外部使用。例如，我们可以将组件内部的 <code>ref</code> 导出到组件实例上，以便在组件外部使用。</p>',22),a=[c];function p(s,d,n,u,r,b){return l(),i("div",null,a)}const m=e(t,[["render",p]]);export{h as __pageData,m as default};
